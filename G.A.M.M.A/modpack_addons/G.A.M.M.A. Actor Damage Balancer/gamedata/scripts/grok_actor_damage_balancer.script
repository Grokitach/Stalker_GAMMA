-- =======================================================================================
-- Grok's Damage Balancer - 05/05/2022
-- =======================================================================================
--
-- Overrides engine calculations for physical damages by using much simpler formulas removing immunities garbage.
-- The goal of this script is to remove the possibility to become immune to physical damages (stalkers, mutants, strike).
-- It uses a simple damage calculation system derived from Puzzle and Dragons shield system.
-- The system calculates a protection factor from different sources (armor, artefacts, boosters)
-- and simply multiply the hit power by (1 - protection).
-- Lots of hardcoded multiplier are used for the different damage sources so that even everything feels right
-- using GAMMA modpack values (ammo pen and power, mutants damage, etc).
-- This script do not change anomalies damages
-- This script overrides most of the values customisable in the game option menu.
-- Keep in mind that difficulty is still taken into account to simply divide incoming damages by a predifined value customisable below.
-- Hopefully I'll add all multipliers into a MCM menu at some point.

-- local ini_diff = ini_file("plugins\\difficulty.ltx")

-- local factors_game = {}
-- factors_game["actor_immunities"] = ini_diff:r_float_ex("gdiff_" .. diff , "actor_immunities") or 1

local vanilla_diff = {
	[1] = "gd_novice",
	[2] = "gd_stalker",
	[3] = "gd_veteran",
	[4] = "gd_master",
}

-- Damage reduction based on difficulty
local difficulty_multiplier = {
	[1]  = 0.65,
	[2]  = 0.8,
	[3]  = 1.0,
	[4]  = 1.2,
}

-- Lists of engine pointers
local SCANNED_SLOTS = {
	[1] = true,         --knife
	[2] = true,	        --wpn 1
	[3] = true,	        --wpn 2
	[4] = true,	        --grenades
	[5] = true,	        --binoculars
	[6] = true,	        --bolt
	[7] = true,	        --outfit
	[8] = true,	        --PDA
	[9] = true,	        --detector
	[10] = true,        --torch
	[11] = true,        --artefact
	[12] = true,        --helmet
	[13] = true,        --backpack
	--[14] = true,		--script animation
}

local hitboxes={}
	hitboxes[19]="head"
	hitboxes[17]="head"
	hitboxes[16]="head"
	hitboxes[15]="head"
	hitboxes[14]="head"
	hitboxes[13]="torso"
	hitboxes[12]="torso"
	hitboxes[11]="torso"
	hitboxes[2]="torso"
	hitboxes[20]="leftarm"
	hitboxes[21]="leftarm"
	hitboxes[22]="leftarm"
	hitboxes[23]="leftarm"
	hitboxes[33]="rightarm"
	hitboxes[34]="rightarm"
	hitboxes[35]="rightarm"
	hitboxes[36]="rightarm"
	hitboxes[3]="leftleg"
	hitboxes[4]="leftleg"
	hitboxes[7]="rightleg"
	hitboxes[8]="rightleg"

local hitbox_mult = {
	["head"] = 0.8,
	["torso"] = 0.9,
	["leftarm"] = 0.85,
	["rightarm"] = 0.85,
	["leftleg"] = 0.85,
	["rightleg"] = 0.85,
}

local dtype = {
	[hit.light_burn]    = "light_burn",
	[hit.burn]          = "burn",
	[hit.strike]        = "strike",
	[hit.shock]         = "shock",
	[hit.wound]         = "wound",
	[hit.radiation]     = "radiation",
	[hit.telepatic]     = "telepatic",
	[hit.chemical_burn] = "chemical_burn",
	[hit.explosion]     = "explosion",
	[hit.fire_wound]    = "fire_wound",
}

-- Immunities names
--		burn_immunity			= 1.0
--		strike_immunity			= 1.0
--		shock_immunity			= 1.0
--		wound_immunity			= 1.0
--		wound_2_immunity		= 1.0
--		radiation_immunity		= 1.0
--		telepatic_immunity		= 1.0
--		chemical_burn_immunity	= 1.0
--		explosion_immunity		= 1.0
--		fire_wound_immunity		= 1.0


-- Protections names
--		burn_protection               = 0.04
--		shock_protection              = 0.25
--		radiation_protection          = 0
--		chemical_burn_protection      = 0.02
--		telepatic_protection          = 0
--		strike_protection             = 0.006
--		explosion_protection          = 0.25
--		wound_protection              = 0.35
--		fire_wound_protection         = 0.25

local HitTypeID = {
	["Burn"]         = 0 ,
	["Shock"]        = 1 ,
	["ChemicalBurn"] = 2 ,
	["Radiation"]    = 3 ,
	["Telepatic"]    = 4 ,
	["Wound"]        = 5 ,
	["FireWound"]    = 6 ,
	["Strike"]       = 7 ,
	["Explosion"]    = 8 ,
	["Wound_2"]      = 9 ,
	["LightBurn"]    = 10,
}

local BoosterID = {
	["HpRestore"]              = 0,
	["PowerRestore"]           = 1,
	["RadiationRestore"]       = 2,
	["BleedingRestore"]        = 3,
	["MaxWeight"]              = 4,
	["RadiationProtection"]    = 5,
	["TelepaticProtection"]    = 6,
	["ChemicalBurnProtection"] = 7,
	["BurnImmunity"]           = 8,
	["ShockImmunity"]          = 9,
	["RadiationImmunity"]      = 10,
	["TelepaticImmunity"]      = 11,
	["ChemicalBurnImmunity"]   = 12,
	["ExplImmunity"]           = 13,
	["StrikeImmunity"]         = 14,
	["FireWoundImmunity"]      = 15,
	["WoundImmunity"]          = 16,
	["MaxCount"]               = 17,
}

grok_damage_adjusters = {
	artefact_multiplier = 0.6,
	[hit.light_burn] = {
		hit_type = HitTypeID["LightBurn"],
		immunity = "burn_immunity",
		protection = "Burn",
		booster_type_def = 8,
		adjuster = 1.00,
		arti_adjuster = 2.0,
		limiter = 0.95,
		elemental = 1,
	},
	[hit.burn] = {
		hit_type = HitTypeID["Burn"],
		immunity = "burn_immunity",
		protection = "Burn",
		booster_type_def = 8,
		adjuster = 1.00,
		arti_adjuster = 2.0,
		limiter = 0.95,
		elemental = 1,
	},
	[hit.strike] = {
		hit_type = HitTypeID["Strike"],
		immunity = "strike_immunity",
		protection = "Strike",
		booster_type_def = 14,
		adjuster = 0.55,
		arti_adjuster = 1.3,
		limiter = 0.70,
		elemental = 1,
	},
	[hit.shock] = {
		hit_type = HitTypeID["Shock"],
		immunity = "shock_immunity",
		protection = "Shock",
		booster_type_def = 9,
		adjuster = 0.102,
		arti_adjuster = 26.5,
		limiter = 0.95,
		elemental = 1,
	},
	[hit.wound] = {
		hit_type = HitTypeID["Wound"],
		immunity = "wound_immunity",
		protection = "Wound",
		booster_type_def = 16,
		adjuster = 0.58,
		arti_adjuster = 2,
		limiter = 0.90,
	},
	--[hit.radiation] = {
	--
	--},
	--[hit.telepatic] = {
	--
	--},
	[hit.chemical_burn] = {
		hit_type = HitTypeID["ChemicalBurn"],
		immunity = "chemical_burn_immunity",
		protection = "ChemicalBurn",
		booster_type_def = 7,
		adjuster = 1.32,
		arti_adjuster = 1,
		limiter = 0.95,
		elemental = 1,
	},
	[hit.explosion] = {
		hit_type = HitTypeID["Explosion"],
		immunity = "explosion_immunity",
		protection = "Explosion",
		booster_type_def = 13,
		adjuster = 0.45,
		arti_adjuster = 1,
		limiter = 0.75,
		elemental = 1,
	},
	[hit.fire_wound] = {
		hit_type = HitTypeID["FireWound"],
		immunity = "fire_wound_immunity",
		protection = "FireWound",
		booster_type_def = 15,
		adjuster = 0.80,
		arti_adjuster = 1,
		limiter = 0.90,
	},
}

function get_game_factor(key)
	--printf("Gameplay difficulty factor requested: [" .. key .. "] = " .. tostring(factors_game[key]))
	return factors_game[key]
end

-- Returns displayed AP res on armor
function get_outfit_ap_res(obj)
	-- Object exists
	if obj then
		local outfit = IsOutfit(obj)
		local helmet = IsHeadgear(obj)
		local cobj = outfit and obj:cast_CustomOutfit() or helmet and obj:cast_Helmet()
		if (not cobj) then
			return 0
		end
			-- Outfit
		if outfit then
			armor_hit_frac = ini_sys:r_float_ex(obj:section(), "hit_fraction_actor") or 1
			armor_bone_value = (1 - armor_hit_frac) * 0.75 or 0

			-- Helmet
		elseif helmet then
			helmet_hit_frac = ini_sys:r_float_ex(obj:section(), "hit_fraction_actor") or 1
			armor_bone_value = (1 - helmet_hit_frac) or 0
		end

		return armor_bone_value * obj:condition()
	end
end

-- Calculates player protection
function get_protection(shit,bone_id,k_ap)

	total_prot = 0
	headshot = 0
	elemental = 0
	psy = 0
	adjuster = 1.00
	local actor = db.actor

	if shit.type == hit.wound_2 then
		hit_type = HitTypeID["Wound_2"]
		immunity = "wound_2_immunity"
		protection = "Wound_2"
		booster_type_def = 16
		adjuster = 0.58
		arti_adjuster = adjuster
		limiter = 0.90
	end

	if grok_damage_adjusters[shit.type] then
		local adjTable = grok_damage_adjusters[shit.type]
		hit_type = adjTable.hit_type
		immunity = adjTable.immunity
		protection = adjTable.protection
		booster_type_def = adjTable.booster_type_def
		adjuster = adjTable.adjuster
		arti_adjuster = adjTable.adjuster * adjTable.arti_adjuster
		limiter = adjTable.limiter
		elemental = adjTable.elemental
	end

--	if shit.type == hit.radiation then
--		hit_type = HitTypeID["Radiation"]
--		immunity = "radiation_immunity"
--		protection = "Radiation"
--		booster_type_def = 10
--		adjuster = 0.80
--		limiter = 1.00
--	end

--	if shit.type == hit.telepatic then
--		hit_type = HitTypeID["Telepatic"]
--		immunity = "telepatic_immunity"
--		protection = "telepatic"
--		booster_type_def = 6
--		adjuster = 1.00
--		arti_adjuster = adjuster
--		limiter = 0.90
--		psy = 1
--	end

	-- Special case for Headshot

	if hitboxes[bone_id] == "head" then
		headshot = 1
	end

	-- Outfit protection
	local armor_protection = 0
	local armor_bone_value = 0
	local outfit = actor:item_in_slot(7)
		if (outfit) then
		local cond = outfit:condition()
		local c_outfit = outfit:cast_CustomOutfit()
		if (c_outfit) then
			if protection == "FireWound" then
				armor_protection = c_outfit:GetBoneArmor( BoneID["bip01_spine"] ) * cond * adjuster or 0
			else
				armor_protection = c_outfit:GetDefHitTypeProtection( hit_type ) * adjuster or 0
			end
			armor_hit_frac = ini_sys:r_float_ex(outfit:section(), "hit_fraction_actor") or 1
			armor_bone_value = (1 - armor_hit_frac) * cond * 0.75 or 0
		end
	end

	-- Helmet protection
	local helmet_protection = 0
	local helmet_bone_value = 0
   	local helmet = db.actor:item_in_slot(12)
    	if (helmet) then
		local cond = helmet:condition()
		local c_helmet = helmet:cast_Helmet()
		if (c_helmet) then
			if protection == "FireWound" then
				helmet_protection = c_helmet:GetBoneArmor( BoneID["bip01_head"] ) * cond * adjuster or 0
			else
				helmet_protection = c_helmet:GetDefHitTypeProtection( hit_type ) * adjuster or 0
			end
			helmet_hit_frac = ini_sys:r_float_ex(helmet:section(), "hit_fraction_actor") or 1
			helmet_bone_value = (1 - helmet_hit_frac) * cond or 0
        end
	end

	-- Artefacts protection
	local artefacts_protection = 0
	local artefacts_ap_res = 0
	actor:iterate_belt( function(owner, obj)
		local sec = obj:section()
		local cond = obj:condition()

		af_bone_value = 0
		prot = 0

		if sec == "af_kevlar" then
			af_bone_value = 0.01
		end
		if sec == "af_kevlar_up" then
			af_bone_value = 0.03
		end
		if sec == "af_plates" then
			af_bone_value = 0.04
		end
		if sec == "af_plates_up" then
			af_bone_value = 0.06
		end

		local immunities_sec = SYS_GetParam(0, sec, "hit_absorbation_sect", sec)
		local prot = SYS_GetParam(2, immunities_sec, immunity , 0) * cond

		if headshot == 1 then
			if sec == "af_kevlar" or sec == "af_kevlar_up" or sec == "af_plates" or sec == "af_plates_up" then
				prot = 0
				af_bone_value = 0
			end
		end

		artefacts_protection = artefacts_protection + prot
		artefacts_ap_res = artefacts_ap_res + af_bone_value
	end)
	artefacts_protection = artefacts_protection * grok_damage_adjusters.artefact_multiplier * arti_adjuster -- scale to the displayed inventory values more or less

	-- Booster protection
	local booster_protection = 0
	db.actor:cast_Actor():conditions():BoosterForEach( function(booster_type, booster_time, booster_value)
		if booster_type == booster_type_def then
			booster_protection = booster_value
		end
	end)

	if elemental == 0 then
		if headshot == 1 then
			armor_bone_value = 0
			armor_protection = 0
		else
			helmet_bone_value = 0
			helmet_protection = 0
		end
	end

	-- Total protection adjusted by damage source
	printf('%s + %s + %s + %s', helmet_protection, armor_protection, artefacts_protection, booster_protection)


	-- Special case if ammo do not penetrate armor
	no_pen = 0
	if shit.type == hit.fire_wound then
		if headshot == 1 then
			printf('ammo pen = %s', k_ap)
			printf('armor class = %s', helmet_bone_value)
			if k_ap < helmet_bone_value then
				helmet_protection = helmet_protection * 0.2 + helmet_bone_value * 1.3
				printf("ammo didn't penetrate armor, damage reduction applied")
				no_pen = 1
			end
		else
			printf('ammo pen = %s', k_ap)
			printf('armor class = %s', armor_bone_value)
			printf('plates armor class = %s', artefacts_ap_res)
			armor_bone_value = armor_bone_value + artefacts_ap_res
			printf('total armor class = %s', armor_bone_value)
			if k_ap < armor_bone_value then
				armor_protection = armor_protection * 0.2 + armor_bone_value * 1.3
				printf("ammo didn't penetrate armor, damage reduction applied")
				no_pen = 1
			end
		end
	end

	total_prot = (helmet_protection + armor_protection + artefacts_protection + booster_protection)
	-- Max protection limiter to avoid immunity to damages
	if total_prot > limiter then
		total_prot = limiter
	end
end

function shit_booster(shit, bone_id, k_ap)
	printf("/// Actor got hit - Grok damage balancer")
	get_protection(shit,bone_id,k_ap)


	-- Strike damage boost because they are very weak compared to other damage sources
	if shit.type == hit.strike then
		shit.power = shit.power -- some strike damage are really low and need to be boosted (jumping from height, etc)
	end

	if shit.type == hit.fire_wound then
		shit.power = shit.power * 0.8 -- weapons damage are a bit crazy, P90 has a power of 0.33 + crazy rate of fire...
	end

	if shit.type == hit.wound then
		shit.power = shit.power * 0.65 -- Now that there's no immunity, damages need to be scaled down. Chimeras do 1.54 damage and boars do 0.90 !
	end

	damage = shit.power * ( 1 - total_prot )

	-- Body part damage multiplier (already applied by engine in shit.power)
	local body_part = hitboxes[bone_id]
	local body_part_mult = hitbox_mult[body_part] or 1.0
	damage = damage * body_part_mult

	-- Resolve mechanic, survive with few hp instead of dying from huge hits
	if damage >= db.actor.health and db.actor.health >= 0.65 then
		printf("/// avoided one shot - last chance")
		damage = db.actor.health - 0.10
	end
	printf('Hit by %s %s damages', shit.power, protection)
	printf('part hit = %s', hitboxes[bone_id])
	printf('total protection = %s', total_prot)
	printf('damage to actor = %s', damage)

	if psy == 1 then
		printf('Psy damages, handeld by engine')
		return
	end

	shit.power = 0
	db.actor:set_health_ex(db.actor.health - damage)
	if no_pen == 0 then
		if shit.type == hit.fire_wound or shit.type == hit.wound then
			db.actor:cast_Actor():conditions():AddWound(damage, hit_type, bone_id)
		end
	end

	if elemental == 1 then
		helmet = db.actor:item_in_slot(12)
        if helmet then
			cond = helmet:condition()
			helmet:set_condition(cond - damage * 0.07)
			printf('Helmet condition dmg = %s', damage * 0.07)
		end

		armor = db.actor:item_in_slot(7)
		if armor then
			cond = armor:condition()
		    armor:set_condition(cond - damage * 0.07)
			printf('Armor condition dmg = %s', damage * 0.07)
		end
	end

	if elemental == 0 then
		if headshot == 1 then
			helmet = db.actor:item_in_slot(12)
			if helmet then
				cond = helmet:condition()
				helmet:set_condition(cond - damage * 0.07)
				printf('Helmet condition dmg = %s', damage * 0.07)
			end
		else
			armor = db.actor:item_in_slot(7)
			if armor then
				cond = armor:condition()
				armor:set_condition(cond - damage * 0.07)
				printf('Armor condition dmg = %s', damage * 0.07)
			end
		end
	end
end


local trigger = 0
local delay = 500
local delay_mine = 10

function elemental_damage(draftman_sec, shit, bone_id, flags)
	if string.find(draftman_sec,"field") then
		tg = time_global()
		if trigger == 0 then
			grok_delay = tg + delay
			trigger = 1
		end
		if (trigger == 1 and tg > grok_delay) then
			trigger = 0
			shit_booster(shit,bone_id)
		end
	else
		tg = time_global()
		if trigger == 0 then
			grok_delay = tg + delay_mine
			trigger = 1
		end
		if (trigger == 1 and tg > grok_delay) then
			trigger = 0
			shit_booster(shit,bone_id)
		end
	end

	flags.ret_value = false
end

local trigger2 = 0
local delay2 = 33
local rad_grace = 1000
local rad_damage = 10000
local rad_trigger = 0

function actor_on_before_hit(shit,bone_id, flags)
	local damage = 0
	tg = time_global()

	if shit.type == hit.radiation then
		if rad_trigger == 0 then
			rad_grace_delay = tg + rad_grace
			rad_grace_cancel = tg + rad_damage
			rad_trigger = 1
			printf("starting radiation protection")
			shit.power = 0
			flags.ret_value = false
			return
		end

		if tg > rad_grace_cancel then
			rad_trigger = 0
			shit.power = 0
			flags.ret_value = false
			return
		end

		if (rad_trigger == 1 and tg > rad_grace_delay and tg < rad_grace_cancel) then
			shit.power = shit.power * difficulty_multiplier[game_num]
			return
		else
			shit.power = 0
			flags.ret_value = false
			return
		end
	end

	if 	shit.type == hit.fire_wound or shit.type == hit.wound or shit.type == hit.wound_2 or shit.type == hit.strike or shit.type == hit.explosion then
		if (trigger2 == 0) then
			grok_delay2 = tg + delay2
			trigger2 = 1
			first_hit = 1
		end
		if (trigger2 == 1) then	
			if (tg < grok_delay2 and first_hit == 0) then
				shit.power = 0
				flags.ret_value = false
				return
			else
				damage = 1
				first_hit = 0
			end
			
			if (first_hit == 0 and tg > grok_delay2) then
				trigger2 = 0
				damage = 1
			end
		end
	end
	
	if shit.type == hit.chemical_burn or shit.type == hit.shock or shit.type == hit.burn or shit.type == hit.light_burn then
		damage = 1
	end

	if damage == 1 then
		if shit.draftsman and shit.draftsman:has_info("npcx_is_companion") then
			shit.power = 0
			flags.ret_value = false
			return
		end

	-- Reduce hit power based on difficulty

		gameplay = alife_storage_manager.get_state().diff_game
		if not (type(gameplay) == "table") then -- for old saves
			alife_storage_manager.get_state().diff_game = {}
			alife_storage_manager.get_state().diff_game["type"] = game_num
			gameplay = alife_storage_manager.get_state().diff_game
		end
		game_num = gameplay["type"] or game_num

			--printf(game_num)
		shit.power = shit.power * difficulty_multiplier[game_num]

	-- Reduce shotguns damage and get ammo AP power
		if (shit.type == hit.fire_wound) then

			wpn = level.object_by_id(shit.weapon_id)

			if wpn == nil then return end

			local sec = wpn:section()
			local wpn_id = wpn:id()

			local ammo_type_number = wpn:get_ammo_type()
			local ammo_list = utils_item.get_ammo(sec, wpn_id)
			local ammo_section = ammo_list[ammo_type_number+1]

			if ammo_section == nil then return end

			if (string.find(ammo_section, "buck")) then
				printf("/// Reducing buckshots damage")
				shit.power = shit.power / 3
			end

			if (string.find(ammo_section, "23x75")) then
				printf("/// Reducing KS23 damage")
				shit.power = shit.power / 5
			end

			if (string.find(ammo_section, "dart")) then
				printf("/// Reducing AP Slugs damage")
				shit.power = shit.power / 2
			end

			if (string.find(ammo_section, "zhekan")) then
				printf("/// Reducing Slugs damage")
				shit.power = shit.power / 2
			end

			if (string.find(ammo_section, "pkm")) then
				printf("/// Reducing PKM damage")
				shit.power = shit.power / 4
			end

			k_ap = ini_sys:r_float_ex(ammo_section, "k_ap") * 10 or 0

			shit_booster(shit,bone_id, k_ap)
		end

		if (shit.type == hit.wound) then
			shit_booster(shit,bone_id)
			flags.ret_value = false
		end

		if (shit.type == hit.strike) then
			shit_booster(shit,bone_id)
		end

		if (shit.type == hit.explosion) then
			shit_booster(shit,bone_id)
		end

		if shit.type == hit.light_burn then
			elemental_damage(shit.draftsman:id(), shit, bone_id, flags)
		end

		if shit.type == hit.burn then
			elemental_damage(shit.draftsman:id(), shit, bone_id, flags)
		end

		if shit.type == hit.shock then
			elemental_damage(shit.draftsman:id(), shit, bone_id, flags)
		end

		if shit.type == hit.chemical_burn then
			elemental_damage(shit.draftsman:id(), shit, bone_id, flags)
		end
	end
end


function actor_on_first_update()
	gameplay = alife_storage_manager.get_state().diff_game
	if not (type(gameplay) == "table") then -- for old saves
		alife_storage_manager.get_state().diff_game = {}
		alife_storage_manager.get_state().diff_game["type"] = game_num
		gameplay = alife_storage_manager.get_state().diff_game
	end
	game_num = gameplay["type"] or game_num
end

function on_game_start()
	RegisterScriptCallback("actor_on_before_hit",actor_on_before_hit)
	RegisterScriptCallback("actor_on_first_update",actor_on_first_update)
end
