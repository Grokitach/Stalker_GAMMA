--[[
--
-- etapomom: Second wind.
-- 
-- It's still copypasta. (But it's cleaner!)
--
-- Thanks to Demonized, Grok, Utjan and CookBook
-- for brainstorming and helping with the code.
--
--]]

--[[
--
-- TODO:
-- Figure out WHY THE FUCK DOES THE FIRST BODY YOU LOOT
-- PRODUCE SLIGHTLY BUT NOTICEABLY DIFFERENT ENOUGH RESULTS
-- **ONLY** THE FIRST TIME YOU LOOT IN ANY GIVEN INSTANCE OF
-- THE GAME. IT DOES NOT MAKE ANY FUCKING SENSE WHATSOEVER
-- AND I DON'T HAVE NO IDEA OF WHERE TO EVEN BEGIN LOOKING.
-- I'M **NOT** SORRY THIS TIME.
--
--]]

-----------------------------------------------------------------------

--local mrs	= math.randomseed
--local dtg	= device():time_global()

local ini_seed = ini_file("plugins\\mass_fat_loot.ltx")

local function dtg()
	return device():time_global()
end

local function mrs(seed, context)
	
	--local check = tonumber(ini_seed:r_string("blacklist", seed) and ini_seed:r_string("blacklist", seed) or 0) or nil
	local check = ini_seed:line_exist("blacklist", seed) and true or false
	
	if (seed == dtg()) then
		context = nil
	end
	
	if context and (context ~= nil) then
		printf("~ MASS: Context [%s]", context and context or "Unknown or undefined")
	end
	
	if (seed == AC_ID) and context and (context ~= nil) then
		printf("~ MASS: Actor ID was used!")
	end
	
	while (check == true) do
		if context and (context ~= nil) then
			printf("~ MASS: RNG Seed [%s] is blacklisted!", seed)
		end
		
		seed = seed + 1
		
		check = ini_seed:line_exist("blacklist", seed) and true or false
	end
	
	if context and (context ~= nil) then
		printf("~ MASS: RNG Seed [%s] chosen!", seed)
	end
	
	math.randomseed(seed)
end

-----------------------------------------------------------------------

-- First order of business, we take care of vanilla Anomaly's loot RNG.

local make_loot 		= death_manager.create_release_item				-- Main loot function
local create_item 		= death_manager.create_item						-- Safeguard question mark
local try_spawn_ammo 	= death_manager.try_spawn_ammo					-- Ammo spawning on body
local spawn_cosmetics 	= death_manager.spawn_cosmetics					-- Spawn misc. loot
local greasy_hands		= death_manager.set_weapon_drop_condition		-- Set the weapon to trash condition
local skin_the_flesh 	= ui_mutant_loot.loot_mutant					-- Mutant loot
local taxidermy 		= ui_mutant_loot.UIMutantLoot.Loot				-- Mutant loot (patch for the achievement and the backpack)
local khajiit_act 		= item_money.actor_on_loot_money				-- Money (it)
local khajiit_npc 		= item_money.npc_on_loot_money					-- Money (had)
local khajiit_get 		= item_money.actor_on_item_use					-- Money (tons of RNG)
local vigilant 			= item_parts.disassembly_item					-- Vigilant Recycler patch
local outfitter 		= item_parts.evaluate_parts						-- Outfit parts, maybe

--if not haru_skills then													-- Just make sure this runs ONLY if you don't have HarukaSai's skill system
--	function death_manager.create_release_item(npc)
--		mrs(npc:id(), "Core NPC loot generation")
--		make_loot(npc)
--		mrs(dtg())
--	end
--end

-- Grok: Disabled to avoid loot pinatas
--function death_manager.create_item(npc, section, number, rnd, to_save)
--	mrs(npc:id())
--	create_item(npc, section, number, rnd, to_save)
--	mrs(npc:id())
--end

--function death_manager.try_spawn_ammo(npc)
--	mrs(npc:id())
--	try_spawn_ammo(npc)
--	mrs(npc:id())
--end
--
--function death_manager.spawn_cosmetics(npc, npc_id, npc_comm, npc_rank)
--	mrs(npc:id())
--	spawn_cosmetics(npc, npc_id, npc_comm, npc_rank)
--	mrs(npc:id())
--end

function death_manager.set_weapon_drop_condition(npc, itm)
	mrs(npc:id())
	greasy_hands(npc, itm)
	mrs(dtg())
end

function ui_mutant_loot.loot_mutant(section, clsid, loot_table, npc, dont_create, victim)
	mrs(victim and victim:id() or dtg())
	skin_the_flesh(section, clsid, loot_table, npc, dont_create, victim)
	mrs(dtg())
end

function ui_mutant_loot.UIMutantLoot:Loot(loot_all)
	mrs(tonumber(level.object_by_id(self.id)) and tonumber(level.object_by_id(self.id)) or dtg())
	taxidermy(self, loot_all)
	mrs(dtg())
end

--function item_money.actor_on_loot_money(corpse)
--	mrs(corpse:id())
--	khajiit_act(corpse)
--	mrs(dtg())
--end
--
--function item_money.npc_on_loot_money(npc, corpse)
--	mrs(corpse:id())
--	khajiit_npc(npc, corpse)
--	mrs(dtg())
--end
--
--function item_money.actor_on_item_use(obj)
--	mrs(obj:id())
--	khajiit_get(obj)
--	mrs(dtg())
--end
--
--function item_parts.disassembly_item(obj, obj_d)
--	mrs(obj:id())
--	vigilant(obj, obj_d)
--	mrs(dtg())
--end
--
--function item_parts.evaluate_parts(obj)
--	local seed = 0
--	
--	if obj then
--		if obj:parent() then
--			if obj:parent():id() == AC_ID then
--				seed = obj:id()
--			else
--				seed = obj:parent():id()
--			end
--		else
--			seed = obj:id()
--		end
--	else
--		seed = dtg
--	end
--	
--	mrs(seed)
--	
--	outfitter(obj)
--	mrs(dtg())
--end
--
-----------------------------------------------------------------------

-- Second, we take care of the stuff that's added by GAMMA.
-- Because everyone does so. These won't kick in if you don't
-- have the correct mods installed, no need to worry.
--
--if death_manager and death_manager.try_spawn_sin_artefacts then			-- Check for this GAMMA-specific function in particular
--	
--	local create_powder 	= death_manager.try_spawn_powders			-- Spawn gunpowder
--	local create_bullets 	= death_manager.try_spawn_bullets			-- Spawn bullet heads
--	local create_casings 	= death_manager.try_spawn_casings			-- Spawn bullet casings
--	local create_artefacts 	= death_manager.try_spawn_sin_artefacts		-- Spawn artefacts on Sin members
--	
--	printf("/// SAVESCUMMER: G.A.M.M.A. is loaded!")
--	
--	function death_manager.try_spawn_powders(npc)
--		mrs(npc:id())
--		create_powder(npc)
--		mrs(npc:id())
--	end
--
--	function death_manager.try_spawn_bullets(npc)
--		mrs(npc:id())
--		create_bullets(npc)
--		mrs(npc:id())
--	end
--
--	function death_manager.try_spawn_casings(npc)
--		mrs(npc:id())
--		create_casings(npc)
--		mrs(npc:id())
--	end
--
--	function death_manager.try_spawn_sin_artefacts(npc)
--		mrs(npc:id())
--		create_artefacts(npc)
--		mrs(npc:id())
--	end
--	
--end
--
--if haru_skills then														-- Check if you have HarukaSai's skill system installed
--	
--	local scavenger 				= haru_skills.scavanger_effect		-- Do the Scavenger roll
--	local skin_the_flesh_skilled 	= haru_skills.monster_on_loot_init	-- Same thing but for monsters
--	
--	printf("/// SAVESCUMMER: HarukaSai's skill system is loaded!")
--	
--	function death_manager.create_release_item(npc)
--		mrs(npc:id(), "Core NPC loot generation")
--		
--		make_loot(npc)
--		
--		mrs(npc:id())
--		CreateTimeEvent("haruka_scavanger", "haruka_scavanger", 0.1, function()
--			haru_skills.scavanger_effect(npc)
--			return true
--		end)
--		
--		mrs(dtg())
--	end
--	
--	function haru_skills.scavanger_effect(npc)
--		mrs(npc:id())
--		scavenger(npc)
--		mrs(npc:id())
--	end
--	
--	function haru_skills.monster_on_loot_init(victim, loot_table)
--		mrs(victim and victim:id() or dtg(), "Monster loot generation")
--		skin_the_flesh_skilled(victim, loot_table)
--		mrs(dtg())
--	end
--	
--end

if zzzz_arti_jamming_repairs then												-- Check if you have WPO installed, version shouldn't matter question mark.
	
	local create_parts	= zzzz_arti_jamming_repairs.weapon_eval_parts			-- Do part condition rolls
	local disassemble	= zzzz_arti_jamming_repairs.custom_disassembly_weapon	-- Same but when disassembling the weapon
	
	printf("/// SAVESCUMMER: WPO is loaded!")
	
	function zzzz_arti_jamming_repairs.weapon_eval_parts(wpn)
		local seed = wpn:parent() and wpn:parent():id() or wpn:id()
		
		if (seed == AC_ID) then
			seed = wpn:id()
		end
		
		mrs(seed, "Weapon parts generation")
		
		create_parts(wpn)
		mrs(dtg())
	end
	
	function zzzz_arti_jamming_repairs.custom_disassembly_weapon(obj, obj_d)
		local seed = obj:parent() and obj:parent():id() or obj:id()
		
		if (seed == AC_ID) then
			seed = obj:id()
		end
		
		mrs(seed)
		
		disassemble(obj, obj_d)
		mrs(dtg())
	end
	
end
--
--if smr_loot and smr_loot_mcm then 										-- Check if you have ZCP installed, again, version shouldn't matter
--	
--	local zcp_create_loot	= smr_loot.try_spawn						-- Spawn additional loot on the body
--	local zcp_npc_odc		= smr_loot.npc_on_death_callback			-- Roll if the body will have a stash
--	local spawn_mag			= smr_loot.try_spawn_mag					-- MagsRedux integration
--	local spawn_lbx			= smr_loot.try_spawn_lootbox				-- Lootboxes integration
--	local spawn_rep			= smr_loot.try_spawn_repair					-- Spawn additional repair items
--	local spawn_rmi			= smr_loot.try_spawn_repair_minor			-- Spawn additional minor repair items
--	local spawn_amm			= smr_loot.try_spawn_ammo					-- Spawn additional ammo
--	local spawn_use			= smr_loot.try_spawn_useful					-- Spawn additional useful items
--	local spawn_med			= smr_loot.try_spawn_meds					-- Spawn additional meds
--	
--	printf("/// SAVESCUMMER: ZCP is loaded!")
--	
--	function smr_loot.npc_on_death_callback(obj, who)
--		mrs(obj:id())
--		zcp_npc_odc(obj, who)
--		mrs(dtg())
--	end
--
--	function smr_loot.try_spawn(box)
--		mrs(box:id())
--		zcp_create_loot(box)
--		mrs(dtg())
--	end
--
--	function smr_loot.try_spawn_mag(box)
--		mrs(box:id())
--		spawn_mag(box)
--		mrs(box:id())
--	end
--
--	function smr_loot.try_spawn_lootbox(box)
--		mrs(box:id())
--		spawn_lbx(box)
--		mrs(box:id())
--	end
--
--	function smr_loot.try_spawn_repair(box)
--		mrs(box:id())
--		spawn_rep(box)
--		mrs(box:id())
--	end
--
--	function smr_loot.try_spawn_repair_minor(box)
--		mrs(box:id())
--		spawn_rmi(box)
--		mrs(box:id())
--	end
--
--	function smr_loot.try_spawn_ammo(box)
--		mrs(box:id())
--		spawn_amm(box)
--		mrs(box:id())
--	end
--
--	function smr_loot.try_spawn_useful(box)
--		mrs(box:id())
--		spawn_use(box)
--		mrs(box:id())
--	end
--
--	function smr_loot.try_spawn_meds(box)
--		mrs(box:id())
--		spawn_med(box)
--		mrs(box:id())
--	end
--
--end