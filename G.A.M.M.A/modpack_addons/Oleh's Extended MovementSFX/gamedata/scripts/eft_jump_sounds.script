-- Edited by CustomBeerFairy. Special thanks for ForserX for idea about ray casting.

-- revised by oleh5230, 17.04.25
-- Last edit: 07.07.25

local debug = false

available_materials = {
    ["default"]                        = "dirt_",
    ["materials\\asphalt"]             = "asphalt_", -- Асфальт
    ["materials\\bricks"]              = "asphalt_", -- Кирпичная стена
    ["materials\\bush"]                = "grass_", -- Кусты, крона деревьев, камышы, листья 
    ["materials\\bush_sux"]            = "grass_", -- Кусты, крона деревьев, камышы, листья сухие
    ["materials\\cloth"]               = "grass_", -- Ткань
    ["materials\\concrete"]            = "asphalt_", -- Монолитный бетон
    ["materials\\death"]               = "dirt_", -- Смертоносная земля (нестандартный материал)
    ["materials\\dirt"]                = "dirt_", -- Мокрая грязь, болото 
    ["materials\\earth"]               = "dirt_", -- Сухая твердая земля (стандартный материал)
    ["materials\\earth_death"]         = "dirt_", -- Сухая твердая земля (нестандартный материал)
    ["materials\\earth_slide"]         = "dirt_", -- Сухая твердая земля (стандартный материал)
    ["materials\\flooring_tile"]       = "asphalt_", -- Плитка, кафель
    ["materials\\glass"]               = "asphalt_", -- Стекло
    ["materials\\grass"]               = "dirt_", -- Земля, покрытая травой
    ["materials\\gravel"]              = "gravel_", -- Гравий
    ["materials\\metal"]               = "metal_", -- Монолитный метал, толстый кусок железа, танк
    ["materials\\metal_pipe"]          = "metal_", -- Металлическая труба
    ["materials\\metal_plate"]         = "metal_thin_", -- Металлическая пластина (толщина 2-5см), Ступеньки
    ["materials\\sand"]                = "gravel_", -- Песок, насыпь
    ["materials\\setka_rabica"]        = "metal_", -- Сетка рабица, колючая проволока
    ["materials\\shifer"]              = "asphalt_", -- Шифер
    ["materials\\stucco"]              = "asphalt_", -- штукатурка
    ["materials\\tin"]                 = "metal_thin_", -- Жесть, крыша домов
    ["materials\\tree_trunk"]          = "wood_", -- Дерево (ствол)
    ["materials\\water"]               = "water_", -- Вода
    ["materials\\water_radiation"]     = "water_", -- Вода
    ["materials\\wood"]                = "wood_", -- Деревянная поверхность, деревянный пол, деревянные ступеньки
    ["materials\\wooden_board"]        = "wood_", -- Деревянная доска (толщина 2-5см), деревянный вагон, ящик
    ["materials\\occ"]                 = "dirt_", -- Материал для оклюжен геометрии
    ["materials\\fake"]                = "dirt_", -- Материал для колижена (нет звука, следов от пуль, теней)
    ["materials\\fake_ladders"]        = "dirt_", -- невидимая лестница
    ["materials\\fake_ladders_woods"]  = "dirt_", -- невидимая деревянная лестница
    ["materials\\fake_slide"]          = "dirt_", -- Материал для колижена (нет звука, следов от пуль, теней)
}

fake_materials = {
    ["materials\\occ"]                 = true, -- Материал для оклюжен геометрии
    ["materials\\fake"]                = true, -- Материал для колижена (нет звука, следов от пуль, теней)
    ["materials\\fake_ladders"]        = true, -- невидимая лестница
    ["materials\\fake_ladders_woods"]  = true, -- невидимая деревянная лестница
    ["materials\\fake_slide"]          = true, -- Материал для колижена (нет звука, следов от пуль, теней)
}

water_materials = {
    ["materials\\water"]               = true,
    ["materials\\water_radiation"]     = true,
}

local jump_sound, land_sound
local volume = 0.5
local enabled = true

function actor_on_jump()
    if not enabled then return end

    local material = available_materials[get_material()]
    if not material then return false end
    jump_sound = sound_object("jump\\jump_" .. material .. math.random(3))
    jump_sound:play(db.actor, 0, sound_object.s2d)
    jump_sound.volume = volume
end

function actor_on_land(landing_speed)
    if not enabled then return end
    print_dbg("landing_speed: %s", landing_speed)

    -- hack for speed set to 0 by fake geometry
    if landing_speed == 0 then landing_speed = 6.66 end
	if landing_speed > 2 then
        local material = available_materials[get_material()]
        if not material then return false end
        land_sound = sound_object("landing\\landing_" .. material .. math.random(3))
        land_sound:play(db.actor, 0, sound_object.s2d)
        land_sound.volume = volume * (landing_speed / 5)
    end
end

local function get_highest_value(tbl)
    local max_key = tbl[1]
    local max_value = 0
    for k,v in pairs(tbl) do
        if v and v > max_value then
            max_value = v
            max_key = k
        end
    end
    return max_key
end

local function ray_cast(pos, dir, range, visualize)
    local ray = demonized_geometry_ray.geometry_ray({
        ray_range = range or 0.5,
        flags = 1 + 2 + 4 + 8,
        visualize = visualize or false
    })
    return ray:get(pos, dir).result.material_name
end

-- vertical x-shaped raycast pattern
-- radius is slightly smaller than player collision box (bubble?)
-- when editing y-offset, edit inversed ray offset too
-- [index] = {x, y, z, range}
ray_cast_offsets = {
    [1] = {0, 1.0, 0, 1.25},
    [2] = {0.225, 0.25, 0.225, 0.5},
    [3] = {0.225, 0.25, -0.225, 0.5},
    [4] = {-0.225, 0.25, 0.225, 0.5},
    [5] = {-0.225, 0.25, -0.225, 0.5},
}

function get_material()
    local pos = db.actor:position()
    local dir = vector():set(0, -1, 0)
    local material
    local material_table = {}

    for k,v in pairs(ray_cast_offsets) do
        material = ray_cast(vector():set(pos.x + v[1], pos.y + v[2], pos.z + v[3]), vector():set(0, -1, 0), v[4], debug)

        -- short circuit if centre ray hits water
        if k == 1 and water_materials[material] then return material end

        -- inversed ray cast to hit surfaces covered by fake geometry
        if fake_materials[material] then
            material = ray_cast(vector():set(pos.x, pos.y - 0.5, pos.z), vector():set(0, 1, 0), 0.5, debug)
        end

        -- select material with most hits
        if material or fake_materials[material] then
            if not material_table[material] then
                material_table[material] = 1
            else
                material_table[material] = material_table[material] + 1
            end
        end
    end
    for k,v in pairs(material_table) do
        print_dbg("raycast result: %s %s", k,v)
    end

    local final_material = get_highest_value(material_table)
    if final_material then
        --print_dbg("selected material: %s", final_material)
        return final_material
    else
        -- backup horizontal plus-shaped ray cast
        final_material = ray_cast(vector():set(pos.x + 0.225, pos.y - 0.001, pos.z), vector():set(-1, 0, 0), 0.45, debug)
        if not final_material then
            final_material = ray_cast(vector():set(pos.x, pos.y - 0.001, pos.z + 0.225), vector():set(0, 0, -1), 0.45, debug)
        end
        print_dbg("backup material: %s", final_material)
        return final_material
    end
end

function on_option_change()
    if ui_mcm then
        enabled = ui_mcm.get("extended_movement_sounds/enabled_jump_sounds") or false
	    volume  = ui_mcm.get("extended_movement_sounds/volume_jump_sounds") or 0.5
    end
end

function on_game_start()
    RegisterScriptCallback("actor_on_jump", actor_on_jump)
    RegisterScriptCallback("actor_on_land", actor_on_land)
    RegisterScriptCallback("on_option_change", on_option_change)
	on_option_change()

    --RegisterScriptCallback("actor_on_footstep", actor_on_footstep) -- uncomment to disable footsteps sounds
end

function actor_on_footstep(material, power, hud_view, flags)
    flags.ret_value = false
end

function print_dbg(txt, ...)
	if debug then
		printf("[eft_jump_sounds] " .. txt, ...)
	end
end