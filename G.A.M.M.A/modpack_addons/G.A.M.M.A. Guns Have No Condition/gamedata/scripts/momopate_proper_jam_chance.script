-- this is just pathetic
if zzzz_arti_jamming_repairs and zzzz_arti_jamming_repairs.process_jam_chance then
	local pjc = zzzz_arti_jamming_repairs.process_jam_chance
	local clamp = _g.clamp
	local gc                  = game.translate_string
	local clr_r  = utils_xml.get_color("d_red")
	local clr_o  = utils_xml.get_color("d_orange")
	local clr_y  = utils_xml.get_color("yellow")
	local clr_g  = utils_xml.get_color("d_green")
	local clr_p  = utils_xml.get_color("d_purple")
	local clr_w	 = utils_xml.get_color("white")
	local clr_ui = utils_xml.get_color("ui_gray_1")
	function zzzz_arti_jamming_repairs.process_jam_chance(wpn)
		if arti_jamming then
			if arti_jamming.get_jam_chance then
				if wpn then 
					jam_prob = arti_jamming.get_jam_chance(wpn)
					-- oleh5230
					silencer_jam_chance = arti_jamming.get_silencer_jam_chance and arti_jamming.get_silencer_jam_chance(wpn) * 0.1 or 0
					-- oleh5230 end
					
					-- momopate: calc the in-engine's jam chance. not all of this shit is accessible via traditional methods so it needs to be this ugly.
					start_prob = SYS_GetParam(2, wpn:section(), "misfire_start_prob") or 0
					start_cond = SYS_GetParam(2, wpn:section(), "misfire_start_condition") or 0
					end_prob = SYS_GetParam(2, wpn:section(), "misfire_end_prob") or 0
					end_cond = SYS_GetParam(2, wpn:section(), "misfire_end_condition") or 0
					wpn:iterate_installed_upgrades(
						function(upgr_sec)
							local section = SYS_GetParam(0, upgr_sec, "section")
							if not section then return end
							start_prob = start_prob + SYS_GetParam(2, section, "misfire_start_prob", 0)
							start_cond = start_cond + SYS_GetParam(2, section, "misfire_start_condition", 0)
							end_prob = end_prob + SYS_GetParam(2, section, "misfire_end_prob", 0)
							end_cond = end_cond + SYS_GetParam(2, section, "misfire_end_condition", 0)
						end)
					vanilla_jam_chance = 0
					if wpn:condition() > start_cond then 
						vanilla_jam_chance = 0 
					elseif wpn:condition() < end_cond then 
						vanilla_jam_chance = end_prob 
					else
						divisor = 1
						if start_cond == end_cond then
							divisor = start_cond
						else
							divisor = start_cond - end_cond
						end
						-- that's the vanilla jam chance formula, straight from the source code
						vanilla_jam_chance = clamp(start_prob + ((start_cond - wpn:condition()) * (end_prob - start_prob) / divisor), 0, 0.99)
					end

					vanilla_jam_chance = vanilla_jam_chance * 100
					total_jam_prob = jam_prob + vanilla_jam_chance + silencer_jam_chance
					--printf("asdf: %s", vanilla_jam_chance)
					
					-- oleh5230
					local clr = clr_ui							 	 	 -- gray: no jam
					if total_jam_prob >= 0.01		then clr = clr_w end -- white: innate jam
					if silencer_jam_chance >= 0.01	then clr = clr_g end -- green: innate and silencer jam
					if jam_prob >= 0.01				then clr = clr_y end -- yellow: internal parts jam
					if jam_prob >= 2.5				then clr = clr_o end -- orange: medium internal parts jam
					if jam_prob >= 10				then clr = clr_r end -- red: high internal parts jam
					-- oleh5230 end
					
					total_jam_prob = tonumber(string.format("%.2f", total_jam_prob))
					
					return " " .. clr_ui .. gc("st_dot") .. " " .. clr .. gc("st_jam") .. "" .. clr_ui .. " " .. total_jam_prob .. "%" .. "\\n"
				else
					return "\\n"
				end
			end
		end
	end
end