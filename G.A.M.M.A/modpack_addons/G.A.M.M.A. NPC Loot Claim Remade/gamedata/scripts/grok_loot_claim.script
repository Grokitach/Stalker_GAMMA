if not claimed then
	claimed = {}
end

if not looted then
	looted = {}
end

function npc_on_death_callback(victim, killer)
	local v_id = victim and victim:id()
	local k_id = killer and killer:id()
	local k_faction = killer and character_community(killer)

	if k_id == db.actor:id() then
		--printf("body can be looted")
		if IsMonster(victim) then
			if (get_story_object("yan_ecolog_semenov")) then
				local need = load_var(db.actor,"yan_ecolog_semenov_task_1_tissue_need") or 0
				if (need > 0) then
					local count = load_var(db.actor,"yan_ecolog_semenov_task_1_tissue_count") or 0
					save_var(db.actor,"yan_ecolog_semenov_task_1_tissue_count",count + 1)
				end
			end
		end
	elseif get_object_story_id(v_id) then
		printf("story npc can be looted")
	elseif v_id == k_id then
		printf("npc suicided can be looted")
	elseif killer:has_info("npcx_is_companion") then
		printf("body can be looted")
	elseif character_community(killer) == "zombied" then
		printf("body can be looted")
	else
		claimed[v_id] = k_id
		--printf("claimed body")
	end
end

function on_before_key_press(key, bind, dis, flags)
    if bind ~= key_bindings.kUSE then return end

	local max_dist = 10
	local ray = ray_pick()
	ray:set_flags(3)
	ray:set_range(max_dist)
	ray:set_position(device().cam_pos)
	ray:set_direction(device().cam_dir)
	ray:set_ignore_object(db.actor)
	ray:query()
	result = ray:get_result()

	if result then
		obj = result.object
		if (obj and IsStalker(obj)) or (obj and IsMonster(obj)) then
			if obj:alive() then return end
			id = obj:id()
			
			if looted[id] then
				actor_menu.set_msg(1, game.translate_string("st_npc_loot_claim_far"), 5)
				flags.ret_value = false
			end
			
			if claimed[id] then
				sender = level.object_by_id(claimed[obj:id()])
				if sender then
					if sender:alive() and IsStalker(sender) then
						flags.ret_value = false
						
						dist = 	sender:position():distance_to(db.actor:position())
						if dist > 25 then
							actor_menu.set_msg(1, game.translate_string("st_npc_loot_claim_far"), 5)
							looted[id] = true
						else
							sender_com = character_community(sender)
							local sender_header = strformat("%s, %s", sender:character_name(), game.translate_string("st_dyn_news_comm_" .. sender_com .. "_" .. 6))
							local rnd_last = round_idp(math.random()*4)+1
							local msg = game.translate_string("st_npc_loot_claim_last_"..rnd_last)
							dynamic_news_helper.send_tip( msg, sender_header, 0, 10, sender:character_icon(), "danger", "npc" )
						end
					end
				end
			end
		end
	end
end

local function save_state(m_data)
	if claimed then
		m_data.claimed = claimed
	end
	
	if looted then
		m_data.looted = looted
	end
end

local function load_state(m_data)
	claimed = m_data.claimed
	if not claimed then
		claimed = {}
	end
	nrows = 0
	for k,v in pairs(claimed) do
		nrows = nrows + 1
	end
	if nrows > 30 then
		claimed = {}
	end
	
	
	looted = m_data.looted
	if not looted then
		looted = {}
	end
	nrows = 0
	for k,v in pairs(looted) do
		nrows = nrows + 1
	end
	if nrows > 30 then
		looted = {}
	end
end

function on_game_start()
	RegisterScriptCallback("npc_on_death_callback",npc_on_death_callback)
	RegisterScriptCallback("monster_on_death_callback",npc_on_death_callback)
	RegisterScriptCallback("on_before_key_press",on_before_key_press)
	RegisterScriptCallback("save_state",save_state)
	RegisterScriptCallback("load_state",load_state)
end