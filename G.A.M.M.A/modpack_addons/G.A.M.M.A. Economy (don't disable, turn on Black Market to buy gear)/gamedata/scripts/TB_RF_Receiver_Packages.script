--CookBook's QoL adjustment of Tweaki_Breeki's
----_____--______---_____---------------_------------------_----_-_-----_-----_---------------
---|--__-\|--____|-|--__-\-------------(_)----------------|-|--|-(_)---|-|---|-|--------------
---|-|__)-|-|__----|-|__)-|___--___-___-___---_____-_-__--|-|__|-|_--__|-|-__|-|-___-_-__-----
---|--_--/|--__|---|--_--//-_-\/-__/-_-\-\-\-/-/-_-\-'__|-|--__--|-|/-_`-|/-_`-|/-_-\-'_-\----
---|-|-\-\|-|------|-|-\-\--__/-(_|--__/-|\-V-/--__/-|----|-|--|-|-|-(_|-|-(_|-|--__/-|-|-|---
---|_|--\_\_|------|_|--\_\___|\___\___|_|-\_/-\___|_|----|_|--|_|_|\__,_|\__,_|\___|_|-|_|---
---_____-----------_-----------------------_____-_-----_----------------------------_---------
--|--__-\---------|-|---------------------/-____(_)---|-|--------------------------|-|--------
--|-|__)-|_-_--___|-|-____-_--__-_--___--|-(___--_--__|-|-___--__-_-_---_--___--___|-|_-___---
--|--___/-_`-|/-__|-|/-/-_`-|/-_`-|/-_-\--\___-\|-|/-_`-|/-_-\/-_`-|-|-|-|/-_-\/-__|-__/-__|--
--|-|--|-(_|-|-(__|---<-(_|-|-(_|-|--__/--____)-|-|-(_|-|--__/-(_|-|-|_|-|--__/\__-\-|_\__-\--
--|_|---\__,_|\___|_|\_\__,_|\__,-|\___|-|_____/|_|\__,_|\___|\__,-|\__,_|\___||___/\__|___/--
------------------------------__/-|------------------------------|-|--------------------------
-----------------------------|___/-------------------------------|_|--------------------------
--Version 1.8
--23/07/2021
--This file should be in gamedata\scripts\
--A fun project to work on so the RF Receiver can be used a bit more than it currently is.
--Also, learning to play around with writing to and reading from arrays was fun.
--HUGE thanks goes to HarukaSai for kindly offering to translate all of the English texts into Russian!
--Also to Real_leaper, Dominus_Imperatoriis, Green_Ghost and Aorushome for bug reports!
--Further thanks to ptolthegoodguy for helping me test why 1.7 was crashing!

--Cookbook QoL adjustment version 1.4
--1.0
--Made hidden loot give arti's simple streamlined upgrades instead of vanilla upgrade items.
--Adjusted reminder function on initial load to have a failsafe to prevent a missing package crash.
--Thanks to FuckinSki for the translation of the line used for the failsafe.
--1.1
--restructured failsafe code cos i'm dumb and moved the looping relationship check code start behind an if statement.
--1.2
--added MCM reminder and upgrade item options.
--1.3
--added MCM auto or manual unpacking options as well as a "cancel package" pda right click function
--1.4
--added PDA note entry functionality
--1.5
--added faction check to bypass psy helm requirement for mono/sin to prevent longstanding crash with those factions.
--1.5.1
--unfucked faction check added for previous update

--[TB] VARIABLES NEEDED TO STORE INFORMATION FOR SAVING AND LOADING
tb_target_item = 0
tb_sufficient_passed = false
tb_package_active = false
tb_reminder = "empty"
tb_package_in_level = "empty"
tb_freq = 0
tb_sender_icon = "empty"
tb_scan_time = 4000
tb_tg_scan = 0
tb_device = "detector_radio"
tb_relation_diff = 250
--[TB] ADDED IN V1.3
tb_target_lvid = 0
tb_target_gvid = 0
tb_bonus_items = 0
tb_badguy_spawned = false
tb_tg_badguys = 0
--[TB] ADDED IN V1.6
tb_previous_level = "empty"
--[TB] ADDED IN V1.7
tb_making_package = false
--[CB] ADDED IN QOL ADJUSTMENT 1.4
cb_note_given =  false

--[CB] MCM MENU FUNCTIONALITY

----------------------------------------------------------------------------------------------------------------------------------------------
--defaults for if you don't have MCM
----------------------------------------------------------------------------------------------------------------------------------------------

cb_reminders = "transitions"
-- "transitions" gives a reminder whenever you load into an outdoor area with an active package | "transitions" присылает напоминание при переходе на наземную локацию
-- "local" only gives a reminder when you load into the area the package is in | "local" присылает напоминание только при переходе на локацию с посылкой
-- "never" stops all reminders except for when the package first spawns | "never" сообщение присылается 1 раз при появлении посылки

cb_upgrades = "vanilla"
-- "vanilla" gives the default S.T.A.L.K.E.R. anomaly upgrade items | "vanilla" в посылках будут наборы улучшений из Anomaly
-- "streamlined" gives the upgrade items from Arti's streamlined upgrades mod. don't select this if you don't have that mod installed
-- "streamlined" в посылках будут наборы улучшений из мода "Упрощенные улучшения Arti" (Arti's streamlined upgrades mod). Не выбирайте эту опцию, если мод не установлен
cb_unpack = "manual"
-- "manual" requires you to use the right click menu option to unpack the package | "manual" распкаовка посылки происходит вручную через контекстное меню пда
-- "automatic" will automatically unpack the package on pickup, useful for not having to figure out which one it is in your inventory.
-- "automatic" посылки будут автоматически распаковываться при подборе, удобно, чтобы случайно не открыть чужую посылку в инвентаре

----------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------

function on_option_change()
	if ui_mcm then
		cb_reminders = ui_mcm.get("RF_package_patch/reminders")
		cb_upgrades = ui_mcm.get("RF_package_patch/upgrades")
	end
end

--[CB] PDA right click functor for canceling packages, uses some code originally from xcvb's interactive pda mod, modified for demonized dynamic functors format

local function is_pda_and_charged(obj, actor_equ, inventory)
	local dev_is_pda = string.find(obj:section(), "device_pda_")
	if dev_is_pda and obj:condition() and obj:condition() > 0.01 then
		return true
	end
end

local function pda_ui_option(obj, actor_equ, inventory)
	return game.translate_string("cb_pda_cancel")
end

local function pda_cancellable_package(obj, actor_equ, inventory)
	if tb_package_active == false then
		actor_menu.set_item_news("success", "detail", game.translate_string("cb_cancel_package_inactive"))
		utils_obj.play_sound("device\\pda\\pda_guide_2")
		return false
	end 
	if  GetEvent("underground") then
		actor_menu.set_item_news("success", "detail", game.translate_string("cb_cancel_package_underground"))
		utils_obj.play_sound("device\\pda\\pda_guide_2")
		return false
	end
	return true
end

local function package_cancel(obj, actor_equ, inventory)
	item_radio.clear_target(tb_target_item)
	RemoveTimeEvent(tb_target_item,"remind_about_radio_package")
	tb_package_active = false
	tb_badguy_spawned = false
	tb_target_item = 0
	tb_target_item = 0
	tb_reminder = "empty"
	tb_package_in_level = "empty"
	tb_scan_time = 4000		
	item_radio.tb_in_range = false
	item_radio.tb_sound_object = false
	item_radio.tb_flash_time = 0
	db.actor:give_game_news(game.translate_string("tb_anon_sender"), game.translate_string("cb_cancel_package_success"), tb_sender_icon, 0, 20000, 0)
	utils_obj.play_sound("device\\pda\\pda_sos")
end

--[TB] ARRAY TO STORE CURRENT GOODWILL POINTS AND FACTION IMAGE FOR MESSAGES
tb_relations = {
	["army"] = {0,"ui_tb_package_icon_army"},
	["bandit"] = {0,"ui_tb_package_icon_bandit"},
	["csky"] = {0,"ui_tb_package_icon_csky"},
	["dolg"] = {0,"ui_tb_package_icon_dolg"},
	["ecolog"] = {0,"ui_tb_package_icon_ecolog"},
	["freedom"] = {0,"ui_tb_package_icon_freedom"},
	["greh"] = {0,"ui_tb_package_icon_greh"},
	["isg"] = {0,"ui_tb_package_icon_isg"},
	["killer"] = {0,"ui_tb_package_icon_killer"},
	["monolith"] = {0,"ui_tb_package_icon_monolith"},
	["renegade"] = {0,"ui_tb_package_icon_renegade"},
	["stalker"] = {0,"ui_tb_package_icon_stalker"},
}

--[TB] ARRAY OF POSSIBLE ENEMY FACTION MEMBERS TO SPAWN AT PACKAGE WHEN PLAYER WITHIN DISTANCE
tb_maybe_badguys = {
	["army"] = {"sim_default_military_0","sim_default_military_1"},
	["bandit"] = {"sim_default_bandit_0","sim_default_bandit_1","sim_default_bandit_3","sim_default_bandit_4"},
	["csky"] = {"sim_default_csky_0","sim_default_csky_1","sim_default_csky_2","sim_default_csky_3","sim_default_csky_4"},
	["dolg"] = {"sim_default_duty_0","sim_default_duty_1","sim_default_duty_2","sim_default_duty_3","sim_default_duty_4"},
	["ecolog"] = {"sim_default_ecolog_01","sim_default_ecolog_0","sim_default_ecolog_1","sim_default_ecolog_2","sim_default_ecolog_3","sim_default_ecolog_4","sim_default_ecolog_5"},
	["freedom"] = {"sim_default_freedom_0","sim_default_freedom_1","sim_default_freedom_2","sim_default_freedom_3","sim_default_freedom_4"},
	["greh"] = {"sim_default_greh_0","sim_default_greh_1","sim_default_greh_2","sim_default_greh_3","sim_default_greh_4"},
	["isg"] = {"sim_default_isg_1","sim_default_isg_2","sim_default_isg_3","sim_default_isg_4"},
	["killer"] = {"sim_default_killer_0","sim_default_killer_1","sim_default_killer_2","sim_default_killer_3","sim_default_killer_4"},
	["monolith"] = {"sim_default_monolith_0","sim_default_monolith_1","sim_default_monolith_2","sim_default_monolith_3","sim_default_monolith_4"},
	["renegade"] = {"sim_default_renegade_0","sim_default_renegade_1","sim_default_renegade_2"},
	["stalker"] = {"sim_default_stalker_0","sim_default_stalker_1","sim_default_stalker_2","sim_default_stalker_3","sim_default_stalker_4"}
}

--[TB] LIST OF FACTION NAMES
tb_factions = {"army", "bandit", "csky", "dolg", "ecolog", "freedom", "greh", "isg", "killer", "monolith", "renegade", "stalker"}

tb_cut_factions = {"army", "bandit", "csky", "dolg", "ecolog", "freedom", "killer", "renegade", "stalker"}

tb_homebases = {"l03_agroprom", "l04_darkvalley", "k00_marsh", "l05_bar", "l08_yantar", "l07_military", "l10_red_forest", "pripyat", "l09_deadcity", "l11_pripyat", "k00_marsh", "l01_escape"}

--[TB] START EMPTY PACKAGE QUEUE OBJECT
tb_package_queue = {}

--[TB] ALL POSSIBLE LINKS TO EACH OF THE LEVELS FROM CURRENT LEVEL
tb_allmaps = {
	["k00_marsh"] = {"l03_agroprom", "l01_escape"},
	["k01_darkscape"] = {"l01_escape", "l04_darkvalley"},
	["l01_escape"] = {"k00_marsh", "k01_darkscape", "l02_garbage", "y04_pole"},
	["l02_garbage"] = {"l05_bar","l06_rostok", "l03_agroprom", "l04_darkvalley", "l01_escape"},
	["l03_agroprom"] = {"l08_yantar", "l02_garbage", "k00_marsh"},
	["l04_darkvalley"] = {"k01_darkscape", "l02_garbage", "k02_trucks_cemetery", "y04_pole"},
	["l05_bar"] = {"l06_rostok", "l07_military", "l02_garbage", "k02_trucks_cemetery"},
	["l06_rostok"] = {"l08_yantar", "l02_garbage", "l05_bar"},
	["l07_military"] = {"l09_deadcity", "l10_red_forest", "l10_radar", "k02_trucks_cemetery", "l05_bar"},
	["l08_yantar"] = {"l09_deadcity", "l06_rostok", "l03_agroprom"},
	["l09_deadcity"] = {"l08_yantar", "l10_limansk", "l07_military"},
	["l10_limansk"] = {"l10_red_forest", "l09_deadcity"}, --l11_hospital
	["l10_radar"] = {"l11_pripyat", "l10_red_forest", "l07_military"},
	["l10_red_forest"] = {"l10_limansk", "l07_military", "l10_radar", "jupiter"},
	["l11_hospital"] = {"l10_limansk", "l12_stancia_2"},
	["l11_pripyat"] = {"l12_stancia", "l10_radar", "pripyat", "jupiter"},
	["l12_stancia"] = {"l11_pripyat", "l12_stancia_2", "zaton"},
	["l12_stancia_2"] = {"l12_stancia", "l13_generators"}, --l11_hospital
	["l13_generators"] = {"l12_stancia_2"},
	["zaton"] = {"l12_stancia", "jupiter"},
	["jupiter"] = {"zaton", "l10_red_forest", "l11_pripyat"},
	["pripyat"] = {"zaton", "l11_pripyat", "jupiter"}, --{"l11_pripyat"}, --jupiter_underground
	["k02_trucks_cemetery"] = {"l05_bar", "l04_darkvalley", "l07_military"},
	["y04_pole"] = {"l01_escape", "l04_darkvalley"},
	["fake_start"] = {"fake_start"},
	["jupiter_underground"] = {"jupiter", "zaton", "l10_red_forest", "l11_pripyat", "pripyat", "l11_pripyat"},
	["l03u_agr_underground"] = {"l03_agroprom", "l08_yantar", "l02_garbage", "k00_marsh"},
	["l04u_labx18"] = {"l04_darkvalley", "k01_darkscape", "l02_garbage", "k02_trucks_cemetery", "y04_pole"},
	["l08u_brainlab"] = {"l08_yantar", "l09_deadcity", "l06_rostok", "l03_agroprom"},
	["l10u_bunker"] = {"l10_radar", "l11_pripyat", "l10_red_forest", "l07_military"},
	["l12u_control_monolith"] = {"l12_stancia_2", "l12_stancia", "l13_generators"},
	["l12u_sarcofag"] = {"l12_stancia", "l11_pripyat", "l12_stancia_2", "zaton"},
	["l13u_warlab"] = {"l13_generators", "l12_stancia_2"},
	["labx8"] = {"pripyat", "l11_pripyat"},

	["default"] = {"k00_marsh",  "l01_escape", "k01_darkscape", "l02_garbage", "y04_pole", "l04_darkvalley", "l05_bar", "l06_rostok", "l03_agroprom", "l08_yantar"},
}

--[TB] BUNCH OF POSSIBLE COORDINATES FOR PACKAGES TO SPAWN
tb_package_coords = {
	["k00_marsh"] = {
		{-1.5272731781006, 0.68968999385834, 99.114852905273, 141705, 68, "tb_loc_w_r", "tb_loc_mar"},
		{-163.67037963867, 0.87495201826096, 81.201217651367, 63895, 239, "tb_loc_w_r", "tb_loc_mar"},
		{-26.006544113159, 2.4517521858215, 282.99658203125, 130275, 76, "tb_loc_nw_r", "tb_loc_mar"},
		{-59.51541519165, 0.83969926834106, -38.090526580811, 109649, 329, "tb_loc_sw_r", "tb_loc_mar"},
		{-70.710746765137, 0.22978699207306, -173.81959533691, 103312, 3, "tb_loc_sw_r", "tb_loc_mar"},
		{-86.349998474121, 0.50133854150772, 279.9114074707, 97508, 77, "tb_loc_nw_r", "tb_loc_mar"},
		{207.10589599609, 1.3095424175262, 170.80838012695, 263938, 93, "tb_loc_ne_r", "tb_loc_mar"},
		{261.69006347656, 0.56020641326904, -130.7229309082, 307947, 181, "tb_loc_se_r", "tb_loc_mar"},
		{290.61563110352, 4.2152152061462, 74.830253601074, 327413, 108, "tb_loc_e_r", "tb_loc_mar"},
		{296.49554443359, 0.97202885150909, 23.443613052368, 333148, 189, "tb_loc_se_r", "tb_loc_mar"},
		{347.29135131836, 7.9713125228882, -80.373580932617, 365905, 45, "tb_loc_se_r", "tb_loc_mar"},
		{384.60894775391, 3.8962762355804, 267.87451171875, 394946, 98, "tb_loc_ne_r", "tb_loc_mar"},
		{403.49340820313, 2.2950587272644, 109.63324737549, 407788, 258, "tb_loc_e_r", "tb_loc_mar"},
		{439.56326293945, 3.1034772396088, 250.46063232422, 432832, 238, "tb_loc_ne_r", "tb_loc_mar"},
		{44.960319519043, 1.9129283428192, -191.05424499512, 163753, 176, "tb_loc_s_r", "tb_loc_mar"},
		{524.15209960938, 2.9793567657471, -196.34428405762, 498471, 283, "tb_loc_se_r", "tb_loc_mar"},
		{600.65576171875, 3.3066146373749, 448.03399658203, 525455, 134, "tb_loc_ne_r", "tb_loc_mar"},
		{623.64642333984, 2.940780878067, 413.06860351563, 528563, 226, "tb_loc_ne_r", "tb_loc_mar"},
		{67.918182373047, 0.71128302812576, -94.671340942383, 178673, 0, "tb_loc_sw_r", "tb_loc_mar"},
		{93.229949951172, 1.9446181058884, 353.8782043457, 194676, 215, "tb_loc_n_r", "tb_loc_mar"}
	},
	["k01_darkscape"] = {
		{-148.45112609863, 2.1966156959534, -298.90780639648, 212872, 1173, "tb_loc_sw_r", "tb_loc_dsc"},
		{-296.42468261719, 4.6278276443481, 502.51113891602, 95197, 1354, "tb_loc_nw_r", "tb_loc_dsc"},
		{-33.650966644287, 1.7646559476852, -556.98718261719, 332172, 1124, "tb_loc_s_r", "tb_loc_dsc"},
		{-333.30310058594, -1.8749610185623, -435.96838378906, 78840, 1133, "tb_loc_sw_r", "tb_loc_dsc"},
		{-41.75846862793, -1.2083034515381, -351.94256591797, 325107, 1185, "tb_loc_sw_r", "tb_loc_dsc"},
		{-558.31988525391, 3.7142128944397, -500.78897094727, 8409, 1131, "tb_loc_sw_r", "tb_loc_dsc"},
		{-83.387214660645, 2.8982381820679, 476.53887939453, 280057, 1334, "tb_loc_n_r", "tb_loc_dsc"},
		{136.15162658691, 1.2467184066772, -74.37833404541, 531583, 1236, "tb_loc_s_r", "tb_loc_dsc"},
		{223.74224853516, -1.1287081241608, -148.19389343262, 640350, 1240, "tb_loc_s_r", "tb_loc_dsc"},
		{243.43673706055, 1.3262813091278, -455.61080932617, 660513, 1121, "tb_loc_se_r", "tb_loc_dsc"},
		{299.84014892578, 0.11884167790413, -199.96139526367, 729873, 1245, "tb_loc_se_r", "tb_loc_dsc"},
		{302.50964355469, -0.55970251560211, 585.89794921875, 730900, 1298, "tb_loc_ne_r", "tb_loc_dsc"},
		{386.78869628906, 2.7109062671661, 13.446165084839, 844615, 1283, "tb_loc_e_r", "tb_loc_dsc"},
		{449.60089111328, 15.593029022217, -81.749877929688, 952811, 1266, "tb_loc_e_r", "tb_loc_dsc"},
		{449.72467041016, 16.701789855957, 309.17404174805, 952257, 1402, "tb_loc_ne_r", "tb_loc_dsc"},
		{452.27801513672, 18.465776443481, 270.51092529297, 954175, 1401, "tb_loc_ne_r", "tb_loc_dsc"},
		{472.9130859375, -0.62056577205658, -400.61276245117, 978490, 1114, "tb_loc_se_r", "tb_loc_dsc"},
		{512.28210449219, -0.40387719869614, 127.67417144775, 1010694, 1104, "tb_loc_e_r", "tb_loc_dsc"},
		{580.9794921875, 0.24546635150909, 11.81841468811, 1039514, 1392, "tb_loc_e_r", "tb_loc_dsc"},
		{81.485084533691, -0.17233689129353, -249.88793945313, 467207, 1204, "tb_loc_s_r", "tb_loc_dsc"}
	},
	["l01_escape"] = {
		{-114.05213928223, 26.895854949951, 322.29055786133, 150807, 578, "tb_loc_nw_r", "tb_loc_esc"},
		{-16.086730957031, 30.373596191406, 477.37994384766, 284519, 406, "tb_loc_nw_r", "tb_loc_esc"},
		{-160.90948486328, -17.706327438354, -163.85343933105, 92172, 585, "tb_loc_sw_r", "tb_loc_esc"},
		{-208.92816162109, -7.4687371253967, -26.879669189453, 43561, 386, "tb_loc_w_r", "tb_loc_esc"},
		{-228.51176452637, -31.850080490112, -310.31240844727, 27722, 576, "tb_loc_sw_r", "tb_loc_esc"},
		{-73.973022460938, 9.5941848754883, 126.84217834473, 200133, 394, "tb_loc_w_r", "tb_loc_esc"},
		{-88.582695007324, 3.0427131652832, 219.37686157227, 184114, 579, "tb_loc_w_r", "tb_loc_esc"},
		{-90.525932312012, -4.8311638832092, -74.958419799805, 177689, 383, "tb_loc_sw_r", "tb_loc_esc"},
		{-98.096084594727, -30.578098297119, -272.18011474609, 166120, 375, "tb_loc_s_r", "tb_loc_esc"},
		{0.2545480132103, -12.459816932678, -119.50346374512, 303304, 556, "tb_loc_s_r", "tb_loc_esc"},
		{102.64688110352, 3.6459798812866, 561.76531982422, 434551, 409, "tb_loc_n_r", "tb_loc_esc"},
		{144.4086151123, -6.8591675758362, -48.898483276367, 476416, 571, "tb_loc_se_r", "tb_loc_esc"},
		{144.5528717041, 0.8191294670105, 336.75857543945, 478862, 541, "tb_loc_ne_r", "tb_loc_esc"},
		{169.03742980957, 4.6058006286621, 91.015502929688, 497870, 400, "tb_loc_e_r", "tb_loc_esc"},
		{218.0364074707, 3.0280055999756, 299.16744995117, 536793, 595, "tb_loc_e_r", "tb_loc_esc"},
		{306.44253540039, 2.9577412605286, 118.827293396, 595515, 391, "tb_loc_e_r", "tb_loc_esc"},
		{307.44360351563, 14.837079048157, 270.55291748047, 596138, 542, "tb_loc_e_r", "tb_loc_esc"},
		{5.8635230064392, 2.7852308750153, 297.65557861328, 308393, 442, "tb_loc_n_r", "tb_loc_esc"},
		{50.590438842773, 4.640688419342, 147.5841217041, 361318, 436, "tb_loc_s_r", "tb_loc_esc"},
		{89.734008789063, 1.130605340004, 460.35699462891, 415699, 607, "tb_loc_n_r", "tb_loc_esc"}
	},
	["l02_garbage"] = {
		{-118.92726135254, 1.5217387676239, -33.088584899902, 86406, 725, "tb_loc_w_r", "tb_loc_gar"},
		{-119.8410949707, -2.365439414978, -231.5634765625, 83012, 722, "tb_loc_sw_r", "tb_loc_gar"},
		{-142.49281311035, -3.9698615074158, 155.01322937012, 66255, 712, "tb_loc_nw_r", "tb_loc_gar"},
		{-162.31246948242, 0.26283451914787, 99.890502929688, 47789, 711, "tb_loc_nw_r", "tb_loc_gar"},
		{-181.58264160156, 0.41548922657967, 25.372142791748, 33574, 798, "tb_loc_w_r", "tb_loc_gar"},
		{-189.09579467773, -4.8816647529602, -143.54487609863, 28642, 813, "tb_loc_sw_r", "tb_loc_gar"},
		{-32.886863708496, -1.1795054674149, 166.14834594727, 137998, 825, "tb_loc_n_r", "tb_loc_gar"},
		{-47.988464355469, 0.39313969016075, -36.417682647705, 129306, 698, "tb_loc_w_r", "tb_loc_gar"},
		{-75.132858276367, -2.2647905349731, 18.088443756104, 115890, 698, "tb_loc_w_r", "tb_loc_gar"},
		{123.33766937256, -1.6943845748901, 176.29930114746, 270532, 742, "tb_loc_ne_r", "tb_loc_gar"},
		{151.05848693848, 1.7686952352524, 215.8184967041, 289891, 705, "tb_loc_ne_r", "tb_loc_gar"},
		{2.6172926425934, 4.3619275093079, 90.059852600098, 160701, 862, "tb_loc_n_r", "tb_loc_gar"},
		{232.84286499023, -3.2770516872406, -184.05126953125, 338854, 872, "tb_loc_se_r", "tb_loc_gar"},
		{251.91268920898, 1.7374104261398, 163.70547485352, 346444, 682, "tb_loc_ne_r", "tb_loc_gar"},
		{270.54412841797, 2.8087847232819, 130.35424804688, 353291, 860, "tb_loc_ne_r", "tb_loc_gar"},
		{61.807434082031, 1.4049496650696, -152.39585876465, 221794, 823, "tb_loc_se_r", "tb_loc_gar"},
		{66.125007629395, 0.90890204906464, 240.9670715332, 225993, 645, "tb_loc_n_r", "tb_loc_gar"},
		{67.837158203125, -0.74806773662567, -139.11022949219, 225625, 668, "tb_loc_s_r", "tb_loc_gar"},
		{75.291122436523, 1.1165518760681, -156.11524963379, 233276, 668, "tb_loc_s_r", "tb_loc_gar"},
		{85.130249023438, 4.5372605323792, -6.5853710174561, 240922, 650, "tb_loc_e_r", "tb_loc_gar"}
	},
	["l03_agroprom"] = {
		{-108.47958374023, 8.8302392959595, 131.66314697266, 102210, 890, "tb_loc_nw_r", "tb_loc_agr"},
		{-110.14212036133, 1.421982049942, -29.045595169067, 102037, 885, "tb_loc_w_r", "tb_loc_agr"},
		{-130.60736083984, 13.860101699829, -260.64321899414, 83985, 1049, "tb_loc_sw_r", "tb_loc_agr"},
		{-164.97407531738, 1.9212321043015, -72.234565734863, 53701, 945, "tb_loc_w_r", "tb_loc_agr"},
		{-177.90003967285, 20.409210205078, 170.44581604004, 44795, 1056, "tb_loc_nw_r", "tb_loc_agr"},
		{-202.4677734375, 4.3563866615295, 1.1351327896118, 27069, 1021, "tb_loc_w_r", "tb_loc_agr"},
		{-22.331432342529, 1.6776245832443, 101.70475006104, 178080, 1025, "tb_loc_n_r", "tb_loc_agr"},
		{-69.766593933105, -3.3068227767944, -310.51098632813, 138757, 1045, "tb_loc_s_r", "tb_loc_agr"},
		{-80.118026733398, 10.612868309021, -100.60734558105, 129465, 878, "tb_loc_sw_r", "tb_loc_agr"},
		{-92.013259887695, 2.6811242103577, 48.751991271973, 117334, 1014, "tb_loc_nw_r", "tb_loc_agr"},
		{124.15956878662, 0.17284020781517, -38.28369140625, 302949, 903, "tb_loc_e_r", "tb_loc_agr"},
		{137.87501525879, 1.2787157297134, 60.012344360352, 316545, 963, "tb_loc_e_r", "tb_loc_agr"},
		{158.68569946289, 1.4303959608078, -245.01614379883, 330224, 951, "tb_loc_se_r", "tb_loc_agr"},
		{165.92504882813, 2.2356534004211, -17.244804382324, 339451, 900, "tb_loc_e_r", "tb_loc_agr"},
		{233.6535949707, 11.045555114746, -227.10266113281, 393863, 953, "tb_loc_se_r", "tb_loc_agr"},
		{235.9928894043, 23.595277786255, -122.11334228516, 394460, 1034, "tb_loc_e_r", "tb_loc_agr"},
		{24.575061798096, -1.4019615650177, -247.78106689453, 218056, 1046, "tb_loc_s_r", "tb_loc_agr"},
		{243.15594482422, 1.5473300218582, 5.4475326538086, 399313, 1033, "tb_loc_e_r", "tb_loc_agr"},
		{31.967037200928, 3.0770931243896, -71.326301574707, 228105, 989, "tb_loc_s_r", "tb_loc_agr"},
		{69.876655578613, 11.596437454224, 109.67334747314, 256348, 1071, "tb_loc_ne_r", "tb_loc_agr"}
	},
	["l04_darkvalley"] = {
		{-120.1967086792, 7.9381146430969, -98.112762451172, 37950, 1584, "tb_loc_nw_r", "tb_loc_val"},
		{-145.14337158203, 1.6816345453262, -464.48291015625, 16389, 1449, "tb_loc_sw_r", "tb_loc_val"},
		{-150.97325134277, -1.0278137922287, -368.98696899414, 13794, 1579, "tb_loc_sw_r", "tb_loc_val"},
		{-19.992944717407, 0.10851189494133, -198.31622314453, 146248, 1504, "tb_loc_w_r", "tb_loc_val"},
		{-55.992538452148, -2.5573272705078, -341.56762695313, 108699, 1543, "tb_loc_sw_r", "tb_loc_val"},
		{-69.461837768555, -0.31123107671738, -211.98634338379, 88985, 1426, "tb_loc_w_r", "tb_loc_val"},
		{-75.446571350098, 0.18763795495033, -446.33367919922, 84090, 1571, "tb_loc_sw_r", "tb_loc_val"},
		{-79.034042358398, 1.8109751939774, -543.67449951172, 79775, 1551, "tb_loc_s_r", "tb_loc_val"},
		{100.14553070068, -0.081931054592133, -307.85284423828, 276694, 1509, "tb_loc_e_r", "tb_loc_val"},
		{12.594738006592, -3.7763333320618, -363.80352783203, 179473, 1442, "tb_loc_s_r", "tb_loc_val"},
		{129.46194458008, -0.87487459182739, 42.603408813477, 311927, 1456, "tb_loc_ne_r", "tb_loc_val"},
		{131.76155090332, 0.081355094909668, -178.8423614502, 313051, 1429, "tb_loc_e_r", "tb_loc_val"},
		{171.10345458984, 0.15314409136772, -228.87164306641, 356010, 1429, "tb_loc_e_r", "tb_loc_val"},
		{182.95742797852, 0.70577704906464, -64.609199523926, 364840, 1605, "tb_loc_ne_r", "tb_loc_val"},
		{20.001573562622, 0.13497611880302, -193.94746398926, 188941, 1598, "tb_loc_n_r", "tb_loc_val"},
		{35.109008789063, 0.87674820423126, 66.910110473633, 206092, 1499, "tb_loc_n_r", "tb_loc_val"},
		{39.182544708252, -2.2029337882996, -428.9736328125, 207963, 1592, "tb_loc_s_r", "tb_loc_val"},
		{44.452144622803, -4.7773232460022, -381.37994384766, 216536, 1436, "tb_loc_s_r", "tb_loc_val"},
		{5.2282848358154, 0.47438022494316, -534.7509765625, 171989, 1451, "tb_loc_s_r", "tb_loc_val"},
		{85.536064147949, 1.719930768013, -511.76110839844, 265709, 1593, "tb_loc_se_r", "tb_loc_val"}
	},
	["l05_bar"] = {
		{101.96125030518, 0.095223009586334, 86.495819091797, 31938, 1728, "tb_loc_w_r", "tb_loc_bar"},
		{105.68991851807, -0.012038439512253, 126.29145050049, 32710, 1718, "tb_loc_w_r", "tb_loc_bar"},
		{108.79559326172, -1.7032694816589, 116.89669799805, 32636, 1722, "tb_loc_w_r", "tb_loc_bar"},
		{123.35034942627, 1.1448799371719, 43.444847106934, 34878, 1759, "tb_loc_sw_r", "tb_loc_bar"},
		{130.6326751709, -1.7001123428345, 82.526054382324, 35908, 1721, "tb_loc_w_r", "tb_loc_bar"},
		{134.37145996094, -1.7192585468292, 110.80506896973, 36669, 1754, "tb_loc_w_r", "tb_loc_bar"},
		{147.31161499023, -0.010794907808304, 135.63993835449, 39632, 1709, "tb_loc_ne_r", "tb_loc_bar"},
		{153.7795715332, -0.00077483057975769, 55.941471099854, 41204, 1683, "tb_loc_s_r", "tb_loc_bar"},
		{160.88835144043, 0.091102659702301, 114.24136352539, 42701, 1687, "tb_loc_n_r", "tb_loc_bar"},
		{186.39889526367, -0.003614604473114, 112.48812866211, 46733, 1692, "tb_loc_ne_r", "tb_loc_bar"},
		{195.8127746582, 4.7419414520264, -146.63717651367, 47577, 1786, "tb_loc_sw_r", "tb_loc_bar"},
		{200.50505065918, -0.0053596496582031, 73.068496704102, 48932, 1705, "tb_loc_e_r", "tb_loc_bar"},
		{205.67820739746, -0.014847338199615, -22.895366668701, 50663, 1770, "tb_loc_s_r", "tb_loc_bar"},
		{235.79553222656, -0.00021082162857056, 54.035762786865, 60661, 1680, "tb_loc_e_r", "tb_loc_bar"},
		{241.71691894531, 2.1597187519073, -67.598930358887, 63153, 1776, "tb_loc_s_r", "tb_loc_bar"},
		{277.05874633789, 3.8030986785889, -141.17218017578, 70437, 1787, "tb_loc_s_r", "tb_loc_bar"},
		{346.26843261719, 10.671092987061, -180.60586547852, 77529, 1674, "tb_loc_se_r", "tb_loc_bar"},
		{41.037273406982, 1.116414308548, 254.74258422852, 22366, 1749, "tb_loc_nw_r", "tb_loc_bar"},
		{57.796447753906, 1.2222950458527, 197.76739501953, 26523, 1748, "tb_loc_nw_r", "tb_loc_bar"},
		{64.497741699219, 0.0085401237010956, 125.02346038818, 29237, 1745, "tb_loc_w_r", "tb_loc_bar"}
	},
	["l06_rostok"] = {
		{-101.50065612793, 0.99639928340912, 162.4115447998, 44847, 1826, "tb_loc_n_r", "tb_loc_ros"},
		{-116.10995483398, 1.6323446035385, 132.02626037598, 43646, 1961, "tb_loc_n_r", "tb_loc_ros"},
		{-177.23446655273, -0.0023437142372131, 158.16213989258, 31308, 1834, "tb_loc_n_r", "tb_loc_ros"},
		{-186.42109680176, -0.098962485790253, 86.473114013672, 28972, 1882, "tb_loc_n_r", "tb_loc_ros"},
		{-214.02505493164, 0.088585466146469, 145.96459960938, 23789, 1874, "tb_loc_nw_r", "tb_loc_ros"},
		{-215.61323547363, -0.00039410591125488, 172.68658447266, 22677, 1844, "tb_loc_nw_r", "tb_loc_ros"},
		{-232.58673095703, -0.0040581822395325, 31.302549362183, 17463, 1904, "tb_loc_w_r", "tb_loc_ros"},
		{-243.88798522949, -0.0036972165107727, 131.10368347168, 12300, 1864, "tb_loc_nw_r", "tb_loc_ros"},
		{-246.99053955078, -0.0057971775531769, 39.667808532715, 10268, 1903, "tb_loc_w_r", "tb_loc_ros"},
		{-255.06991577148, -0.0069873332977295, -34.006652832031, 8259, 1910, "tb_loc_w_r", "tb_loc_ros"},
		{-259.47518920898, -0.00078690052032471, 28.694437026978, 7507, 1934, "tb_loc_w_r", "tb_loc_ros"},
		{-262.51651000977, 0.12268710136414, 10.699193000793, 5977, 1905, "tb_loc_w_r", "tb_loc_ros"},
		{-273.3479309082, 0.046719461679459, 144.02536010742, 3848, 1858, "tb_loc_nw_r", "tb_loc_ros"},
		{-282.16122436523, -0.00092938542366028, 57.950958251953, 2152, 1920, "tb_loc_w_r", "tb_loc_ros"},
		{-285.74276733398, -0.0017593502998352, 109.28510284424, 718, 1870, "tb_loc_nw_r", "tb_loc_ros"},
		{-39.953701019287, -0.0063645541667938, 127.9927520752, 60701, 1929, "tb_loc_ne_r", "tb_loc_ros"},
		{-56.983612060547, -0.0029295384883881, 112.66494750977, 55663, 1930, "tb_loc_e_r", "tb_loc_ros"},
		{-63.318752288818, -11.845592498779, -130.16297912598, 53737, 1955, "tb_loc_se_r", "tb_loc_ros"},
		{-70.748542785645, -0.0069791376590729, 150.67283630371, 51960, 1818, "tb_loc_n_r", "tb_loc_ros"},
		{14.443355560303, -0.00014528632164001, 114.71719360352, 66885, 1925, "tb_loc_ne_r", "tb_loc_ros"}
	},
	["l07_military"] = {
		{-126.77365112305, -7.7190752029419, 212.69905090332, 180663, 1996, "tb_loc_n_r", "tb_loc_mil"},
		{-138.27593994141, -15.919235229492, 359.70523071289, 170484, 2109, "tb_loc_n_r", "tb_loc_mil"},
		{-170.0983581543, -14.977201461792, 397.39135742188, 143991, 2034, "tb_loc_n_r", "tb_loc_mil"},
		{-196.5198059082, -8.0005922317505, 317.75903320313, 122528, 2028, "tb_loc_n_r", "tb_loc_mil"},
		{-204.39709472656, -21.537940979004, 193.08393859863, 117104, 1997, "tb_loc_n_r", "tb_loc_mil"},
		{-217.59384155273, -20.594947814941, 242.06649780273, 106364, 2055, "tb_loc_nw_r", "tb_loc_mil"},
		{-235.27279663086, -13.21934223175, 62.60461807251, 88271, 2098, "tb_loc_sw_r", "tb_loc_mil"},
		{-252.19566345215, -14.777551651001, 367.13690185547, 76861, 2159, "tb_loc_nw_r", "tb_loc_mil"},
		{-256.81253051758, -22.145307540894, 232.89723205566, 75049, 2130, "tb_loc_nw_r", "tb_loc_mil"},
		{-261.54061889648, -8.5548524856567, 8.2447776794434, 72187, 2101, "tb_loc_sw_r", "tb_loc_mil"},
		{-314.22845458984, -22.585073471069, 233.21206665039, 30164, 2022, "tb_loc_w_r", "tb_loc_mil"},
		{-358.23327636719, -17.900043487549, 204.91386413574, 4028, 2140, "tb_loc_w_r", "tb_loc_mil"},
		{-37.800483703613, -14.645964622498, 137.06414794922, 257529, 2012, "tb_loc_e_r", "tb_loc_mil"},
		{-50.621578216553, -18.567991256714, 346.1005859375, 245744, 2124, "tb_loc_ne_r", "tb_loc_mil"},
		{-77.123756408691, 3.5415439605713, 89.78653717041, 229904, 2107, "tb_loc_se_r", "tb_loc_mil"},
		{25.518558502197, -1.2604532241821, 100.32361602783, 313869, 2013, "tb_loc_se_r", "tb_loc_mil"},
		{46.379188537598, -8.1137228012085, 204.30163574219, 331060, 2016, "tb_loc_e_r", "tb_loc_mil"},
		{60.521156311035, -16.105535507202, 339.77944946289, 340285, 2066, "tb_loc_ne_r", "tb_loc_mil"},
		{69.481903076172, -12.780811309814, 376.78530883789, 348237, 2064, "tb_loc_ne_r", "tb_loc_mil"},
		{72.378601074219, -9.7039031982422, 263.15768432617, 350218, 1973, "tb_loc_ne_r", "tb_loc_mil"}
	},
	["l08_yantar"] = {
		{-0.64203971624374, 1.5084668397903, -161.19361877441, 65284, 2282, "tb_loc_s_r", "tb_loc_yan"},
		{-185.65315246582, 6.6900253295898, -186.40325927734, 3224, 2276, "tb_loc_w_r", "tb_loc_yan"},
		{-180.59049987793, 6.0716352462769, -194.31805419922, 3866, 2276, "tb_loc_sw_r", "tb_loc_yan"},
		{-78.138465881348, -11.547216415405, -292.93246459961, 32198, 2260, "tb_loc_sw_r", "tb_loc_yan"},
		{-91.230171203613, -12.307676315308, -243.73905944824, 28715, 2224, "tb_loc_sw_r", "tb_loc_yan"},
		{98.839820861816, 0.37403053045273, -65.573341369629, 113141, 2209, "tb_loc_e_r", "tb_loc_yan"},
		{113.78045654297, -5.7177295684814, -223.16589355469, 119639, 2200, "tb_loc_se_r", "tb_loc_yan"},
		{126.07861328125, -3.2429563999176, 61.657562255859, 128107, 2286, "tb_loc_ne_r", "tb_loc_yan"},
		{137.24348449707, 2.8570652008057, 27.060665130615, 136042, 2212, "tb_loc_ne_r", "tb_loc_yan"},
		{168.85375976563, -7.5038323402405, -82.235260009766, 148257, 2292, "tb_loc_e_r", "tb_loc_yan"},
		{22.862121582031, -11.931819915771, -292.98107910156, 75512, 2198, "tb_loc_s_r", "tb_loc_yan"},
		{35.395118713379, 3.0084400177002, -156.01756286621, 81370, 2228, "tb_loc_s_r", "tb_loc_yan"},
		{53.098480224609, -11.108350753784, -251.00079345703, 91445, 2288, "tb_loc_s_r", "tb_loc_yan"},
		{50.164154052734, -11.785552024841, -245.93576049805, 89814, 2288, "tb_loc_s_r", "tb_loc_yan"},
		{95.920890808105, -1.0610380172729, -194.17150878906, 110406, 2258, "tb_loc_se_r", "tb_loc_yan"}
	},
	["l09_deadcity"] = {
		{-119.48655700684, 5.8051586151123, -228.6826171875, 62595, 2315, "tb_loc_s_r", "tb_loc_cit"},
		{-121.01277160645, 1.1036695241928, -114.71089172363, 62385, 2359, "tb_loc_sw_r", "tb_loc_cit"},
		{-126.7142791748, 1.9483884572983, -48.898551940918, 61363, 2348, "tb_loc_w_r", "tb_loc_cit"},
		{-153.15214538574, 3.0436203479767, 33.314311981201, 44906, 2414, "tb_loc_w_r", "tb_loc_cit"},
		{-174.75230407715, 2.0423302650452, -154.60816955566, 30568, 2316, "tb_loc_sw_r", "tb_loc_cit"},
		{-214.93588256836, 9.4003763198853, -171.56689453125, 9891, 2318, "tb_loc_sw_r", "tb_loc_cit"},
		{10.28111076355, 1.8686209917068, 115.00714111328, 142298, 2324, "tb_loc_n_r", "tb_loc_cit"},
		{107.64558410645, 2.2034559249878, 32.364086151123, 202680, 2415, "tb_loc_ne_r", "tb_loc_cit"},
		{109.00594329834, 1.2130873203278, 88.896751403809, 203698, 2357, "tb_loc_ne_r", "tb_loc_cit"},
		{117.20364379883, 1.0405136346817, -134.86596679688, 207177, 2353, "tb_loc_se_r", "tb_loc_cit"},
		{143.55572509766, -2.3428308963776, -20.607921600342, 224399, 2404, "tb_loc_e_r", "tb_loc_cit"},
		{2.0195999145508, 1.6021195650101, 72.587875366211, 137548, 2339, "tb_loc_n_r", "tb_loc_cit"},
		{25.549657821655, -5.3307709693909, -247.13958740234, 152663, 2407, "tb_loc_s_r", "tb_loc_cit"},
		{71.374847412109, 1.2464402914047, -64.560012817383, 178653, 2356, "tb_loc_se_r", "tb_loc_cit"},
		{74.844116210938, 1.9796160459518, 104.93649291992, 181061, 2340, "tb_loc_ne_r", "tb_loc_cit"}
	},
	["l10_limansk"] = {
		{-12.09471321106, 0.18447890877724, -349.091796875, 19052, 2445, "tb_loc_s_r", "tb_loc_lim"},
		{-16.048357009888, -3.3791344165802, 92.27018737793, 18023, 2456, "tb_loc_n_r", "tb_loc_lim"},
		{-29.892189025879, -6.0000038146973, 29.720489501953, 10219, 2455, "tb_loc_n_r", "tb_loc_lim"},
		{-33.281387329102, -4.081184387207, 172.79325866699, 8431, 2477, "tb_loc_n_r", "tb_loc_lim"},
		{-39.362434387207, -4.0773339271545, -247.48321533203, 6114, 2450, "tb_loc_s_r", "tb_loc_lim"},
		{-40.324081420898, -5.0116167068481, -125.94403076172, 6272, 2452, "tb_loc_s_r", "tb_loc_lim"},
		{-5.6756343841553, 15.077376365662, 195.9044342041, 22921, 2459, "tb_loc_n_r", "tb_loc_lim"},
		{-5.8033981323242, -4.1972861289978, -246.2313079834, 22392, 2431, "tb_loc_s_r", "tb_loc_lim"},
		{-50.856643676758, -4.7771196365356, -190.2113494873, 3215, 2434, "tb_loc_s_r", "tb_loc_lim"},
		{-8.8189468383789, 0.97564727067947, -293.74090576172, 20362, 2481, "tb_loc_s_r", "tb_loc_lim"},
		{13.039494514465, -6.957179069519, -28.787004470825, 33572, 2439, "tb_loc_s_r", "tb_loc_lim"},
		{13.411673545837, -1.9051793813705, 125.01847839355, 32333, 2458, "tb_loc_n_r", "tb_loc_lim"},
		{19.360433578491, -4.5075736045837, -81.712692260742, 36722, 2437, "tb_loc_s_r", "tb_loc_lim"},
		{2.4721002578735, -4.9915156364441, -92.004051208496, 27001, 2437, "tb_loc_s_r", "tb_loc_lim"},
		{27.746068954468, -0.058924704790115, -297.24029541016, 40349, 2469, "tb_loc_s_r", "tb_loc_lim"},
		{37.394130706787, 4.8722467422485, 311.22763061523, 46731, 2463, "tb_loc_n_r", "tb_loc_lim"},
		{40.651641845703, 13.206407546997, 178.86553955078, 48900, 2460, "tb_loc_n_r", "tb_loc_lim"},
		{52.41707611084, 3.2922492027283, 253.77940368652, 53052, 2461, "tb_loc_n_r", "tb_loc_lim"},
		{54.917182922363, -5.6246294975281, 21.839624404907, 52770, 2443, "tb_loc_n_r", "tb_loc_lim"},
		{68.759017944336, 3.3405191898346, 283.55429077148, 57401, 2462, "tb_loc_n_r", "tb_loc_lim"}
	},
	["l10_radar"] = {
		{-29.500776290894, -1.0036900043488, 88.720458984375, 2065, 2641, "tb_loc_w_r", "tb_loc_rad"},
		{106.94738006592, -0.18738210201263, -4.3478908538818, 46193, 2573, "tb_loc_w_r", "tb_loc_rad"},
		{109.50173950195, 1.2345566749573, -82.498916625977, 46743, 2498, "tb_loc_w_r", "tb_loc_rad"},
		{112.95410919189, 3.8754880428314, -89.183311462402, 47412, 2577, "tb_loc_w_r", "tb_loc_rad"},
		{24.092491149902, -0.11303205788136, -69.121307373047, 18705, 2616, "tb_loc_w_r", "tb_loc_rad"},
		{316.69274902344, -49.273338317871, 18.279706954956, 76010, 2552, "tb_loc_nw_r", "tb_loc_rad"},
		{378.66186523438, -50.510940551758, -20.616247177124, 110022, 2487, "tb_loc_n_r", "tb_loc_rad"},
		{43.938705444336, 0.303696423769, 25.152782440186, 26583, 2622, "tb_loc_w_r", "tb_loc_rad"},
		{463.3405456543, -48.722007751465, 14.92209815979, 152164, 2542, "tb_loc_n_r", "tb_loc_rad"},
		{518.68341064453, -50.501331329346, -20.65020942688, 175190, 2540, "tb_loc_ne_r", "tb_loc_rad"},
		{545.97412109375, -42.564876556396, 79.77880859375, 189171, 2525, "tb_loc_ne_r", "tb_loc_rad"},
		{553.47448730469, -59.736686706543, -197.92016601563, 192547, 2507, "tb_loc_se_r", "tb_loc_rad"},
		{558.79779052734, -41.260852813721, 177.06163024902, 194407, 2528, "tb_loc_ne_r", "tb_loc_rad"},
		{56.013477325439, 3.9075014591217, 70.782608032227, 29292, 2624, "tb_loc_w_r", "tb_loc_rad"},
		{579.69256591797, -61.875400543213, -141.9207611084, 205045, 2492, "tb_loc_e_r", "tb_loc_rad"},
		{593.53393554688, -52.285636901855, -51.785236358643, 210980, 2521, "tb_loc_e_r", "tb_loc_rad"},
		{594.20166015625, -51.718811035156, -381.71264648438, 211744, 2502, "tb_loc_se_r", "tb_loc_rad"},
		{610.07208251953, -50.297676086426, 3.3322367668152, 219859, 2523, "tb_loc_e_r", "tb_loc_rad"},
		{614.54858398438, -51.905899047852, -286.81042480469, 220742, 2505, "tb_loc_se_r", "tb_loc_rad"},
		{631.37957763672, -51.630462646484, -78.316871643066, 225659, 2519, "tb_loc_e_r", "tb_loc_rad"}
	},
	["l10_red_forest"] = {
		{-100.45635986328, -0.011831432580948, -238.17616271973, 10405, 2822, "tb_loc_w_r", "tb_loc_red"},
		{-112.49780273438, 1.9576653242111, -291.81942749023, 8640, 2792, "tb_loc_w_r", "tb_loc_red"},
		{-14.74259853363, 2.2093436717987, -109.02491760254, 55645, 2785, "tb_loc_n_r", "tb_loc_red"},
		{-34.733444213867, -2.1908299922943, -232.56408691406, 39063, 2760, "tb_loc_w_r", "tb_loc_red"},
		{-37.184448242188, 0.78095209598541, -363.05435180664, 36659, 2835, "tb_loc_sw_r", "tb_loc_red"},
		{-59.628273010254, 0.62318205833435, 33.525249481201, 23000, 2769, "tb_loc_nw_r", "tb_loc_red"},
		{-70.457336425781, 1.1789920330048, -33.707012176514, 16431, 2770, "tb_loc_nw_r", "tb_loc_red"},
		{129.3235168457, 2.1585819721222, -255.97988891602, 103783, 2778, "tb_loc_e_r", "tb_loc_red"},
		{15.911014556885, -0.82917702198029, -60.65739440918, 76820, 2768, "tb_loc_n_r", "tb_loc_red"},
		{187.8264465332, -5.9757623672485, -21.879493713379, 122066, 2774, "tb_loc_ne_r", "tb_loc_red"},
		{189.99588012695, -7.8130507469177, -116.28408813477, 124593, 2773, "tb_loc_ne_r", "tb_loc_red"},
		{190.32192993164, 1.0376524925232, -238.32608032227, 120612, 2831, "tb_loc_e_r", "tb_loc_red"},
		{250.98724365234, -4.539493560791, -94.160758972168, 151451, 2844, "tb_loc_ne_r", "tb_loc_red"},
		{34.550762176514, 0.48889991641045, -5.928343296051, 83178, 2768, "tb_loc_nw_r", "tb_loc_red"},
		{62.671501159668, -1.6878155469894, -307.4990234375, 92758, 2783, "tb_loc_s_r", "tb_loc_red"}
	},
	--["l11_hospital"] = {
	--	{-93.503341674805, 32.727638244629, 785.56518554688, 1522, 2892, "the Deserted Hospital"},
	--},
	["l11_pripyat"] = {
		{-1.6520437002182, -2.2206122875214, -12.648792266846, 101353, 2949, "tb_loc_s_r", "tb_loc_pri"},
		{-102.42932128906, -2.2260103225708, -28.478969573975, 14239, 3046, "tb_loc_sw_r", "tb_loc_pri"},
		{-148.09417724609, -2.243926525116, 29.682828903198, 2283, 2931, "tb_loc_sw_r", "tb_loc_pri"},
		{-38.673408508301, -1.6994947195053, -50.345401763916, 61614, 2922, "tb_loc_sw_r", "tb_loc_pri"},
		{-41.394104003906, -0.56843876838684, 214.49374389648, 57645, 2943, "tb_loc_nw_r", "tb_loc_pri"},
		{-99.08349609375, -1.5557813644409, 91.854850769043, 18398, 2930, "tb_loc_w_r", "tb_loc_pri"},
		{105.32002258301, 2.9202837944031, 206.76040649414, 217424, 2953, "tb_loc_e_r", "tb_loc_pri"},
		{106.06272125244, -0.94925463199615, -5.0489568710327, 215550, 3019, "tb_loc_se_r", "tb_loc_pri"},
		{115.97847747803, -2.2209753990173, 42.291030883789, 226150, 2933, "tb_loc_se_r", "tb_loc_pri"},
		{125.10976409912, -0.78525876998901, 182.11323547363, 230960, 2938, "tb_loc_e_r", "tb_loc_pri"},
		{13.755334854126, 0.56257092952728, 266.17483520508, 119021, 3051, "tb_loc_n_r", "tb_loc_pri"},
		{172.8278503418, -0.74565225839615, 104.54313659668, 254210, 3011, "tb_loc_e_r", "tb_loc_pri"},
		{176.63453674316, -1.1698770523071, 158.33099365234, 255881, 2936, "tb_loc_e_r", "tb_loc_pri"},
		{20.970027923584, -1.8328968286514, -243.51919555664, 128408, 2918, "tb_loc_s_r", "tb_loc_pri"},
		{21.002883911133, -1.0010313987732, 138.72996520996, 127849, 3064, "tb_loc_n_r", "tb_loc_pri"},
		{33.401092529297, -2.2668821811676, -60.37255859375, 144079, 3063, "tb_loc_s_r", "tb_loc_pri"},
		{4.6835861206055, -1.7322903871536, -89.200981140137, 107997, 2921, "tb_loc_s_r", "tb_loc_pri"},
		{59.245819091797, -1.8315937519073, -168.44749450684, 172421, 2925, "tb_loc_s_r", "tb_loc_pri"},
		{8.8129863739014, -1.3713134527206, -189.54067993164, 113623, 2919, "tb_loc_s_r", "tb_loc_pri"},
		{90.9697265625, -0.55571955442429, 243.14401245117, 202874, 2953, "tb_loc_ne_r", "tb_loc_pri"}
	},
	["l12_stancia"] = {
		{1011.923034668, -0.0053041875362396, -129.94323730469, 470532, 3206, "tb_loc_e_r", "tb_loc_aes1"},
		{273.88821411133, -0.0068168938159943, -38.054210662842, 116335, 3189, "tb_loc_w_r", "tb_loc_aes1"},
		{375.78558349609, 1.0255014896393, -77.845336914063, 163943, 3195, "tb_loc_n_r", "tb_loc_aes1"},
		{419.37713623047, 1.5121793746948, -15.974581718445, 186869, 3192, "tb_loc_n_r", "tb_loc_aes1"},
		{484.42279052734, 0.087662875652313, -28.132146835327, 217606, 3112, "tb_loc_n_r", "tb_loc_aes1"},
		{608.03649902344, -0.0025603473186493, -19.029111862183, 270200, 3109, "tb_loc_n_r", "tb_loc_aes1"},
		{659.34613037109, 4.815495967865, -172.2444152832, 287072, 3122, "tb_loc_e_r", "tb_loc_aes1"},
		{728.32019042969, 0.0076620876789093, -8.8324661254883, 319999, 3105, "tb_loc_ne_r", "tb_loc_aes1"},
		{741.39758300781, 4.8019528388977, -157.10681152344, 327068, 3129, "tb_loc_e_r", "tb_loc_aes1"},
		{782.2373046875, 0.03949761390686, -167.95561218262, 343467, 3118, "tb_loc_se_r", "tb_loc_aes1"},
		{832.41674804688, 1.4634515047073, -20.510936737061, 366810, 3103, "tb_loc_ne_r", "tb_loc_aes1"},
		{882.08679199219, 1.5517052412033, 29.894992828369, 388452, 3101, "tb_loc_ne_r", "tb_loc_aes1"},
		{903.24774169922, 1.2282946109772, -69.13451385498, 403087, 3081, "tb_loc_e_r", "tb_loc_aes1"},
		{909.26873779297, 0.43381687998772, -210.26306152344, 408743, 3079, "tb_loc_se_r", "tb_loc_aes1"},
		{969.02709960938, -0.019600600004196, 32.792072296143, 450071, 3085, "tb_loc_ne_r", "tb_loc_aes1"}
	},
	["l12_stancia_2"] = {
		{-20.494522094727, -0.046567112207413, 184.03857421875, 44357, 3231, "tb_loc_w_r", "tb_loc_aes2"},
		{-36.914344787598, 0.29976305365562, 191.64785766602, 30663, 3229, "tb_loc_w_r", "tb_loc_aes2"},
		{113.44429016113, -0.0029491484165192, 309.37911987305, 156742, 3254, "tb_loc_nw_r", "tb_loc_aes2"},
		{266.27395629883, 1.7058387994766, 147.09506225586, 270507, 3293, "tb_loc_sw_r", "tb_loc_aes2"},
		{333.42431640625, -0.021835416555405, 272.7922668457, 328803, 3298, "tb_loc_n_r", "tb_loc_aes2"},
		{393.48599243164, 6.3676743507385, 382.86431884766, 384468, 3320, "tb_loc_n_r", "tb_loc_aes2"},
		{437.16482543945, -0.10010626912117, 185.91250610352, 420929, 3355, "tb_loc_s_r", "tb_loc_aes2"},
		{49.157405853271, 9.6176128387451, 197.42855834961, 103778, 3233, "tb_loc_w_r", "tb_loc_aes2"},
		{500.21954345703, 1.2005145549774, 224.23970031738, 468624, 3354, "tb_loc_s_r", "tb_loc_aes2"},
		{59.742084503174, 4.990128993988, 68.551086425781, 110265, 3488, "tb_loc_sw_r", "tb_loc_aes2"},
		{6.3057065010071, 4.2675576210022, 144.42385864258, 66438, 3495, "tb_loc_sw_r", "tb_loc_aes2"},
		{607.26318359375, 1.7128146886826, 243.30001831055, 553568, 3389, "tb_loc_e_r", "tb_loc_aes2"},
		{820.28002929688, 0.14639401435852, 325.43395996094, 706650, 3474, "tb_loc_ne_r", "tb_loc_aes2"},
		{916.76574707031, -0.0028077960014343, 141.18156433105, 777190, 3448, "tb_loc_se_r", "tb_loc_aes2"},
		{23.577014923096, 29.006227493286, 276.13763427734, 78936, 3253, "tb_loc_nw_r", "tb_loc_aes2"}
	},
	["l13_generators"] = {
		{-101.30375671387, 39.551937103271, -521.98754882813, 105904, 3508, "tb_loc_s_r", "tb_loc_gen"},
		{-104.63162994385, 33.120086669922, -91.40202331543, 103693, 3527, "tb_loc_nw_r", "tb_loc_gen"},
		{-109.94926452637, 36.857124328613, -467.39904785156, 95826, 3600, "tb_loc_s_r", "tb_loc_gen"},
		{-118.97431945801, 26.009466171265, -404.13766479492, 86879, 3515, "tb_loc_sw_r", "tb_loc_gen"},
		{-158.43014526367, 30.718967437744, -291.25653076172, 54537, 3556, "tb_loc_w_r", "tb_loc_gen"},
		{-187.57843017578, 33.171287536621, -325.55755615234, 33463, 3514, "tb_loc_w_r", "tb_loc_gen"},
		{-213.19372558594, 28.908090591431, -427.97247314453, 17378, 3513, "tb_loc_sw_r", "tb_loc_gen"},
		{-25.256622314453, 26.601194381714, -63.542652130127, 174636, 3528, "tb_loc_n_r", "tb_loc_gen"},
		{-48.511688232422, 30.428108215332, -435.44784545898, 152314, 3597, "tb_loc_s_r", "tb_loc_gen"},
		{-65.803535461426, 32.457206726074, -342.1379699707, 138574, 3555, "tb_loc_w_r", "tb_loc_gen"},
		{101.35711669922, 30.285459518433, -550.63092041016, 299063, 3550, "tb_loc_se_r", "tb_loc_gen"},
		{15.34042930603, 24.453868865967, -443.03500366211, 216016, 3607, "tb_loc_s_r", "tb_loc_gen"},
		{16.789400100708, 26.598768234253, -512.66101074219, 218284, 3519, "tb_loc_s_r", "tb_loc_gen"},
		{165.6121673584, 25.879482269287, -78.684875488281, 362247, 3532, "tb_loc_ne_r", "tb_loc_gen"},
		{195.50524902344, 27.383646011353, -314.37826538086, 388814, 3542, "tb_loc_e_r", "tb_loc_gen"},
		{204.15455627441, 31.585569381714, -487.38842773438, 396913, 3548, "tb_loc_se_r", "tb_loc_gen"},
		{204.18830871582, 29.476787567139, -253.64163208008, 397221, 3543, "tb_loc_e_r", "tb_loc_gen"},
		{211.88235473633, 20.41397857666, -147.97074890137, 412680, 3533, "tb_loc_ne_r", "tb_loc_gen"},
		{76.752799987793, 24.310276031494, -54.284538269043, 275589, 3611, "tb_loc_n_r", "tb_loc_gen"},
		{83.675468444824, 30.898843765259, -399.36117553711, 282156, 3521, "tb_loc_se_r", "tb_loc_gen"}
	},
	["zaton"] = {
		{-147.60580444336, -4.4517121315002, 301.91284179688, 653326, 4267, "tb_loc_nw_r", "tb_loc_zat"},
		{-150.77394104004, 21.159231185913, -209.54209899902, 638543, 4444, "tb_loc_s_r", "tb_loc_zat"},
		{-160.42599487305, 8.0954217910767, 85.449028015137, 616753, 4383, "tb_loc_w_r", "tb_loc_zat"},
		{-187.26564025879, -3.3396105766296, 14.252264976501, 570920, 4399, "tb_loc_w_r", "tb_loc_zat"},
		{-246.7158203125, 28.243530273438, -366.23333740234, 452971, 4227, "tb_loc_sw_r", "tb_loc_zat"},
		{-268.92272949219, 32.595615386963, -261.00518798828, 409370, 4228, "tb_loc_sw_r", "tb_loc_zat"},
		{-315.64312744141, 10.240501403809, 397.57781982422, 320542, 4137, "tb_loc_nw_r", "tb_loc_zat"},
		{-357.13479614258, 23.900959014893, -180.05654907227, 245126, 4176, "tb_loc_sw_r", "tb_loc_zat"},
		{-39.139236450195, 19.453763961792, -330.19677734375, 867313, 4354, "tb_loc_s_r", "tb_loc_zat"},
		{109.98294830322, -4.1149849891663, -232.71192932129, 1154858, 4287, "tb_loc_s_r", "tb_loc_zat"},
		{120.04262542725, -6.9616460800171, 201.5500793457, 1170909, 4458, "tb_loc_ne_r", "tb_loc_zat"},
		{226.37512207031, 33.51358795166, -334.55603027344, 1350097, 4177, "tb_loc_se_r", "tb_loc_zat"},
		{230.02919006348, 17.533971786499, 511.51467895508, 1356111, 4429, "tb_loc_ne_r", "tb_loc_zat"},
		{299.75006103516, 16.775381088257, 92.539588928223, 1477383, 4435, "tb_loc_e_r", "tb_loc_zat"},
		{301.33633422852, 0.43808200955391, 197.6625213623, 1482610, 4380, "tb_loc_e_r", "tb_loc_zat"},
		{357.76892089844, 33.084365844727, 48.02840423584, 1563115, 4208, "tb_loc_e_r", "tb_loc_zat"},
		{378.5354309082, 33.320854187012, -444.81268310547, 1590981, 4454, "tb_loc_se_r", "tb_loc_zat"},
		{5.3404722213745, -6.7175259590149, -37.723617553711, 958100, 4309, "tb_loc_s_r", "tb_loc_zat"},
		{554.12841796875, 11.073240280151, -297.10116577148, 1831288, 4357, "tb_loc_se_r", "tb_loc_zat"},
		{60.620403289795, -6.1062622070313, 464.95904541016, 1068613, 4178, "tb_loc_n_r", "tb_loc_zat"}
	},
	["jupiter"] = {
		{-104.63998413086, 0.0048342645168304, -139.32943725586, 543972, 4733, "tb_loc_s_r", "tb_loc_jup"},
		{-149.19508361816, 0.65769505500793, 54.169692993164, 472265, 4533, "tb_loc_w_r", "tb_loc_jup"},
		{-201.09411621094, -13.461722373962, 337.40835571289, 380638, 4484, "tb_loc_nw_r", "tb_loc_jup"},
		{-23.251113891602, 3.4246072769165, 148.1237487793, 680824, 4735, "tb_loc_n_r", "tb_loc_jup"},
		{-301.05633544922, -1.5740859508514, 256.71676635742, 203932, 4565, "tb_loc_nw_r", "tb_loc_jup"},
		{-327.68432617188, -0.46692913770676, -344.90570068359, 159838, 4624, "tb_loc_sw_r", "tb_loc_jup"},
		{-428.72314453125, -0.17780922353268, -294.7004699707, 10070, 4623, "tb_loc_sw_r", "tb_loc_jup"},
		{100.95932006836, 18.446222305298, -465.22814941406, 882879, 4466, "tb_loc_s_r", "tb_loc_jup"},
		{103.66532897949, 1.254568696022, 233.56109619141, 891023, 4501, "tb_loc_n_r", "tb_loc_jup"},
		{16.636182785034, 28.546026229858, -456.48876953125, 736912, 4466, "tb_loc_s_r", "tb_loc_jup"},
		{229.34550476074, -10.356903076172, 191.90386962891, 1106708, 4653, "tb_loc_ne_r", "tb_loc_jup"},
		{285.47573852539, -4.2336525917053, 395.10186767578, 1184870, 4668, "tb_loc_ne_r", "tb_loc_jup"},
		{295.51831054688, 28.858869552612, -135.67283630371, 1195724, 4681, "tb_loc_se_r", "tb_loc_jup"},
		{380.63952636719, 3.4571108818054, 12.963842391968, 1318695, 4686, "tb_loc_e_r", "tb_loc_jup"},
		{390.64886474609, 4.7495021820068, 330.79650878906, 1333684, 4496, "tb_loc_ne_r", "tb_loc_jup"},
		{426.47955322266, 28.525848388672, -298.42822265625, 1389462, 4696, "tb_loc_se_r", "tb_loc_jup"},
		{51.799327850342, 5.4229297637939, 230.49865722656, 807058, 4654, "tb_loc_n_r", "tb_loc_jup"},
		{65.630950927734, 25.07837677002, -171.44857788086, 825080, 4509, "tb_loc_s_r", "tb_loc_jup"},
		{8.0445556640625, 3.725878238678, -18.601421356201, 732979, 4726, "tb_loc_n_r", "tb_loc_jup"},
		{99.728004455566, 18.925405502319, -395.13363647461, 882976, 4474, "tb_loc_s_r", "tb_loc_jup"}
	},
	["pripyat"] = {
		{-101.64154052734, -0.44676825404167, -54.60319519043, 91593, 4982, "tb_loc_n_r", "tb_loc_out"},
		{-111.6471862793, 1.1057761907578, -124.26145172119, 82811, 4985, "tb_loc_w_r", "tb_loc_out"},
		{-12.619153022766, -0.49894854426384, -351.30596923828, 180142, 4994, "tb_loc_s_r", "tb_loc_out"},
		{-125.50523376465, 0.24729087948799, -342.58239746094, 70662, 5065, "tb_loc_sw_r", "tb_loc_out"},
		{-182.07890319824, -0.40769428014755, -214.7306060791, 34396, 4888, "tb_loc_w_r", "tb_loc_out"},
		{-190.35760498047, -0.52376163005829, -76.280349731445, 29548, 4963, "tb_loc_w_r", "tb_loc_out"},
		{-198.20266723633, -0.48836761713028, -133.25802612305, 24883, 4964, "tb_loc_w_r", "tb_loc_out"},
		{-224.12945556641, 0.018535047769547, -24.946027755737, 10610, 5033, "tb_loc_w_r", "tb_loc_out"},
		{-41.80460357666, -0.39516311883926, -29.461326599121, 145456, 4972, "tb_loc_n_r", "tb_loc_out"},
		{-58.867652893066, -0.4987365603447, -177.5739440918, 141265, 5014, "tb_loc_s_r", "tb_loc_out"},
		{1.8882836103439, -0.68420362472534, 22.258533477783, 202038, 4919, "tb_loc_n_r", "tb_loc_out"},
		{10.972635269165, -0.46581882238388, -284.46224975586, 212375, 4917, "tb_loc_s_r", "tb_loc_out"},
		{122.20041656494, 1.2041594982147, 296.85092163086, 348160, 5024, "tb_loc_ne_r", "tb_loc_out"},
		{153.31825256348, 0.94135230779648, -73.959060668945, 382627, 4897, "tb_loc_e_r", "tb_loc_out"},
		{172.73364257813, 0.25077643990517, 99.980934143066, 404130, 5058, "tb_loc_ne_r", "tb_loc_out"},
		{240.92733764648, 0.45767799019814, 305.67468261719, 456170, 5021, "tb_loc_ne_r", "tb_loc_out"},
		{33.580257415771, -0.47251677513123, -28.531055450439, 245254, 5028, "tb_loc_e_r", "tb_loc_out"},
		{46.422595977783, 0.45167574286461, -190.53691101074, 262435, 5009, "tb_loc_se_r", "tb_loc_out"},
		{9.8547611236572, 0.5790559053421, 78.532440185547, 213625, 4930, "tb_loc_n_r", "tb_loc_out"},
		{94.640823364258, 1.0876548290253, 104.1615524292, 315181, 5042, "tb_loc_ne_r", "tb_loc_out"}
	},
	["k02_trucks_cemetery"] = {
		{-100.21502685547, 4.7243037223816, -102.90797424316, 313602, 5120, "tb_loc_s_r", "tb_loc_trc"},
		{-144.03692626953, 7.1489720344543, -298.35095214844, 253982, 5102, "tb_loc_sw_r", "tb_loc_trc"},
		{-148.46539306641, 3.8976557254791, 35.588623046875, 250812, 5125, "tb_loc_w_r", "tb_loc_trc"},
		{-161.89283752441, 6.7984261512756, -242.54110717773, 232945, 5107, "tb_loc_sw_r", "tb_loc_trc"},
		{-183.33564758301, 5.3201975822449, -102.87693786621, 200720, 5119, "tb_loc_sw_r", "tb_loc_trc"},
		{-198.59362792969, 6.0502486228943, 59.622711181641, 180895, 5240, "tb_loc_w_r", "tb_loc_trc"},
		{-38.460472106934, 6.8957276344299, -303.21362304688, 396785, 5113, "tb_loc_s_r", "tb_loc_trc"},
		{-5.0919346809387, 5.6457281112671, -17.330320358276, 435752, 5141, "tb_loc_n_r", "tb_loc_trc"},
		{-87.822326660156, 2.1666030883789, 12.80560874939, 329990, 5139, "tb_loc_w_r", "tb_loc_trc"},
		{-96.636337280273, 5.7147183418274, 178.85766601563, 318771, 5147, "tb_loc_nw_r", "tb_loc_trc"},
		{108.95338439941, 9.9065179824829, 243.52128601074, 587185, 5154, "tb_loc_ne_r", "tb_loc_trc"},
		{117.9610748291, 6.7835154533386, -217.46878051758, 597738, 5194, "tb_loc_se_r", "tb_loc_trc"},
		{132.81533813477, 3.7070434093475, -175.73069763184, 615293, 5223, "tb_loc_se_r", "tb_loc_trc"},
		{160.58934020996, 9.042989730835, 11.934228897095, 654181, 5188, "tb_loc_e_r", "tb_loc_trc"},
		{175.95196533203, 1.9822694063187, -191.62516784668, 674235, 5209, "tb_loc_se_r", "tb_loc_trc"},
		{187.2619934082, 10.18626499176, -16.42200088501, 689278, 5176, "tb_loc_e_r", "tb_loc_trc"},
		{187.48434448242, 9.3772869110107, 217.56407165527, 689539, 5170, "tb_loc_ne_r", "tb_loc_trc"},
		{19.174194335938, 1.2887287139893, 119.61190032959, 469411, 5145, "tb_loc_n_r", "tb_loc_trc"},
		{60.071495056152, 7.5800023078918, -90.516006469727, 523300, 5199, "tb_loc_e_r", "tb_loc_trc"},
		{98.437477111816, 9.5542078018188, -48.85680770874, 573401, 5301, "tb_loc_e_r", "tb_loc_trc"}
	},
	["y04_pole"] = {
		{-105.99816131592, -22.33317565918, -79.057518005371, 22542, 5312, "tb_loc_s_r", "tb_loc_pol"},
		{-111.78207397461, 0.25643712282181, 141.97560119629, 18609, 5323, "tb_loc_nw_r", "tb_loc_pol"},
		{-112.0022354126, 1.8183279037476, 78.62483215332, 20356, 5315, "tb_loc_w_r", "tb_loc_pol"},
		{-126.5697479248, 0.22408345341682, 147.02491760254, 14981, 5323, "tb_loc_nw_r", "tb_loc_pol"},
		{-154.10188293457, -18.530838012695, -42.685253143311, 7192, 5311, "tb_loc_sw_r", "tb_loc_pol"},
		{-33.695232391357, -5.3427844047546, -20.770050048828, 50835, 5313, "tb_loc_se_r", "tb_loc_pol"},
		{-81.073280334473, 0.26162666082382, 124.30212402344, 32961, 5316, "tb_loc_n_r", "tb_loc_pol"},
		{0.49928486347198, 0.28078016638756, 164.05612182617, 66117, 5335, "tb_loc_n_r", "tb_loc_pol"},
		{1.3984597921371, -0.63300907611847, 83.595222473145, 66032, 5327, "tb_loc_e_r", "tb_loc_pol"},
		{104.1383895874, 2.4937195777893, 162.59124755859, 91560, 5332, "tb_loc_ne_r", "tb_loc_pol"},
		{12.637714385986, 1.4302126169205, 57.117660522461, 69584, 5314, "tb_loc_e_r", "tb_loc_pol"},
		{61.238941192627, 1.4817223548889, 132.2451171875, 83188, 5330, "tb_loc_ne_r", "tb_loc_pol"},
		{80.641723632813, 0.042697131633759, 124.38198852539, 87725, 5331, "tb_loc_ne_r", "tb_loc_pol"},
		{-118.7970123291, -19.26512336731, -23.763687133789, 17318, 5344, "tb_loc_s_r", "tb_loc_pol"},
		{-203.26054382324, -19.500780105591, -59.575073242188, 422, 5337, "tb_loc_sw_r", "tb_loc_pol"}
	},
	["fake_start"] = {
		{7.8561215400696, 0.012599855661392, -0.083247311413288, 531, 5303, "tb_loc_e_r", "tb_loc_dbg"},
		{-0.036912433803082, 0.0022355318069458, 7.4532346725464, 326, 5304, "tb_loc_n_r", "tb_loc_dbg"},
		{-7.923800945282, 0.018068969249725, 0.52995783090591, 94, 5303, "tb_loc_w_r", "tb_loc_dbg"}
	},
}

--[TB] POSSIBLE BONUS ITEMS
tb_extraloot = {
	{"ration_ru","st_ration_ru"},
	{"ration_ukr","st_ration_ukr"},
	{"mre","st_mre"},
	{"mineral_water","st_mineral_water"},
	{"tobacco","st_tobacco"},
	{"antirad","st_antirad"},
	{"yadylin","st_yadylin"},
	{"stimpack","st_stim_impro"},
	{"medkit","st_medkit"},
	{"ied_rpg_new","st_ied_rpg"},
	{"ied_new","st_ied"},
	{"batteries_dead","st_batteries"},
	{"hand_watch","st_hand_watch"},
	{"jewelry_box","st_jewelry_box"},
}

tb_extraupgrades = {
	{"upgr_o_1_armor","st_upgr_o_armor"},
	{"upgr_o_1_arty","st_upgr_o_arty"},
	{"upgr_o_1_bleed","st_upgr_o_health"},
	{"upgr_o_1_burn","st_upgr_o_burn"},
	{"upgr_o_1_carry","st_upgr_o_carry"},
	{"upgr_o_1_chem","st_upgr_o_chem"},
	{"upgr_o_1_damage","st_upgr_o_damage"},
	{"upgr_o_1_durability","st_upgr_o_durability"},
	{"upgr_o_1_health","st_upgr_o_health"},
	{"upgr_o_1_power","st_upgr_o_power"},
	{"upgr_o_1_psi","st_upgr_o_psi"},
	{"upgr_o_1_rad","st_upgr_o_rad"},
	{"upgr_o_1_run","st_upgr_o_run"},
	{"upgr_o_1_shock","st_upgr_o_shock"},
	{"upgr_o_1_weight","st_upgr_o_weight"},
	{"upgr_o_2_armor","st_upgr_o_armor"},
	{"upgr_o_2_arty","st_upgr_o_arty"},
	{"upgr_o_2_bleed","st_upgr_o_bleed"},
	{"upgr_o_2_burn","st_upgr_o_burn"},
	{"upgr_o_2_carry","st_upgr_o_carry"},
	{"upgr_o_2_chem","st_upgr_o_chem"},
	{"upgr_o_2_damage","st_upgr_o_damage"},
	{"upgr_o_2_durability","st_upgr_o_durability"},
	{"upgr_o_2_health","st_upgr_o_health"},
	{"upgr_o_2_power","st_upgr_o_power"},
	{"upgr_o_2_psi","st_upgr_o_psi"},
	{"upgr_o_2_rad","st_upgr_o_rad"},
	{"upgr_o_2_run","st_upgr_o_run"},
	{"upgr_o_2_shock","st_upgr_o_shock"},
	{"upgr_o_2_weight","st_upgr_o_weight"},
	{"upgr_o_3_armor","st_upgr_o_armor"},
	{"upgr_o_3_arty","st_upgr_o_arty"},
	{"upgr_o_3_bleed","st_upgr_o_bleed"},
	{"upgr_o_3_burn","st_upgr_o_burn"},
	{"upgr_o_3_carry","st_upgr_o_carry"},
	{"upgr_o_3_chem","st_upgr_o_chem"},
	{"upgr_o_3_damage","st_upgr_o_damage"},
	{"upgr_o_3_durability","st_upgr_o_durability"},
	{"upgr_o_3_health","st_upgr_o_health"},
	{"upgr_o_3_power","st_upgr_o_power"},
	{"upgr_o_3_psi","st_upgr_o_psi"},
	{"upgr_o_3_rad","st_upgr_o_rad"},
	{"upgr_o_3_run","st_upgr_o_run"},
	{"upgr_o_3_shock","st_upgr_o_shock"},
	{"upgr_o_3_weight","st_upgr_o_weight"},
	{"upgr_w_1_calibre","st_upgr_w_calibre"},
	{"upgr_w_1_dispersion","st_upgr_w_dispersion"},
	{"upgr_w_1_firemode","st_upgr_w_firemode"},
	{"upgr_w_1_grenade_mount","st_upgr_w_grenade_mount"},
	{"upgr_w_1_inertion","st_upgr_w_inertion"},
	{"upgr_w_1_magazine","st_upgr_w_magazine"},
	{"upgr_w_1_muffle","st_upgr_w_muffle"},
	{"upgr_w_1_recoil","st_upgr_w_recoil"},
	{"upgr_w_1_reliability","st_upgr_w_reliability"},
	{"upgr_w_1_rpm","st_upgr_w_rpm"},
	{"upgr_w_1_scope","st_upgr_w_scope"},
	{"upgr_w_1_scope_mount","st_upgr_w_scope_mount"},
	{"upgr_w_1_speed","st_upgr_w_speed"},
	{"upgr_w_1_weight","st_upgr_w_weight"},
	{"upgr_w_2_calibre","st_upgr_w_calibre"},
	{"upgr_w_2_dispersion","st_upgr_w_dispersion"},
	{"upgr_w_2_firemode","st_upgr_w_firemode"},
	{"upgr_w_2_grenade_mount","st_upgr_w_grenade_mount"},
	{"upgr_w_2_inertion","st_upgr_w_inertion"},
	{"upgr_w_2_magazine","st_upgr_w_magazine"},
	{"upgr_w_2_muffle","st_upgr_w_muffle"},
	{"upgr_w_2_recoil","st_upgr_w_recoil"},
	{"upgr_w_2_reliability","st_upgr_w_reliability"},
	{"upgr_w_2_rpm","st_upgr_w_rpm"},
	{"upgr_w_2_scope","st_upgr_w_scope"},
	{"upgr_w_2_scope_mount","st_upgr_w_scope_mount"},
	{"upgr_w_2_speed","st_upgr_w_speed"},
	{"upgr_w_2_weight","st_upgr_w_weight"},
	{"upgr_w_3_calibre","st_upgr_w_calibre"},
	{"upgr_w_3_dispersion","st_upgr_w_dispersion"},
	{"upgr_w_3_firemode","st_upgr_w_firemode"},
	{"upgr_w_3_grenade_mount","st_upgr_w_grenade_mount"},
	{"upgr_w_3_inertion","st_upgr_w_inertion"},
	{"upgr_w_3_magazine","st_upgr_w_magazine"},
	{"upgr_w_3_muffle","st_upgr_w_muffle"},
	{"upgr_w_3_recoil","st_upgr_w_recoil"},
	{"upgr_w_3_reliability","st_upgr_w_reliability"},
	{"upgr_w_3_rpm","st_upgr_w_rpm"},
	{"upgr_w_3_scope","st_upgr_w_scope"},
	{"upgr_w_3_scope_mount","st_upgr_w_scope_mount"},
	{"upgr_w_3_speed","st_upgr_w_speed"},
	{"upgr_w_3_weight","st_upgr_w_weight"},
}

CB_streamlined_extraupgrades = {
	{"upgr_o_1_physical", "st_upgr_o_physical"},
	{"upgr_o_1_magical", "st_upgr_o_magical"},
	{"upgr_o_1_utility", "st_upgr_o_utility"},
	{"upgr_o_2_physical", "st_upgr_o_physical"},
	{"upgr_o_2_magical", "st_upgr_o_magical"},
	{"upgr_o_2_utility", "st_upgr_o_utility"},
	{"upgr_o_3_physical", "st_upgr_o_physical"},
	{"upgr_o_3_magical", "st_upgr_o_magical"},
	{"upgr_o_3_utility", "st_upgr_o_utility"},
	{"upgr_w_1_internal", "st_upgr_w_internal"},
	{"upgr_w_1_external", "st_upgr_w_external"},
	{"upgr_w_1_optical", "st_upgr_w_optical"},
	{"upgr_w_2_internal", "st_upgr_w_internal"},
	{"upgr_w_2_external", "st_upgr_w_external"},
	{"upgr_w_2_optical", "st_upgr_w_optical"},
	{"upgr_w_3_internal", "st_upgr_w_internal"},
	{"upgr_w_3_external", "st_upgr_w_external"},
	{"upgr_w_3_optical", "st_upgr_w_optical"},
}

tb_junks = {
	{"af_atom","st_af_atom_name"},
	{"af_ball","st_af_ball_name"},
	{"af_black_angel","st_af_black_angel_name"},
	{"af_cell","st_af_cell_name"},
	{"af_chelust","st_af_chelust_name"},
	{"af_cocoon","st_af_cocoon_name"},
	{"af_dragon_eye","st_af_dragon_eye_name"},
	{"af_ear","st_af_ear_name"},
	{"af_elektron","st_af_elektron_name"},
	{"af_fonar","st_af_fonar_name"},
	{"af_fountain","st_af_fountain_name"},
	{"af_generator","st_af_generator_name"},
	{"af_grapes","st_af_grapes_name"},
	{"af_kislushka","st_af_kislushka_name"},
	{"af_kogot","st_af_kogot_name"},
	{"af_lighthouse","st_af_lighthouse_name"},
	{"af_medallion","st_af_medallion_name"},
	{"af_moh","st_af_moh_name"},
	{"af_peas","st_af_peas_name"},
	{"af_repei","st_af_repei_name"},
	{"af_sandstone","st_af_sandstone_name"},
	{"af_signet","st_af_signet_name"},
	{"af_skull_miser","st_af_skull_miser_name"},
	{"af_spaika","st_af_spaika_name"},
	{"af_star_phantom","st_af_star_phantom_name"},
	{"af_sun","st_af_sun_name"},
	{"af_tapeworm","st_af_tapeworm_name"},
	{"af_zhelch","st_af_zhelch_name"},
}

--[TB] MONKEY PATCH INTO THE RIGHT-CLICK use_package_random FOR POTENTIAL BONUS ITEMS
tb_copy_of_itms_manager = itms_manager.use_package_random
function itms_manager.use_package_random(obj)
	tb_copy_of_itms_manager(obj)
	if tb_bonus_items >= 1 then
		local animson = ui_options.get("video/player/animations")
		if animson then
			CreateTimeEvent(0,"wait_five_seconds",5,function()
				give_bonus_items()
				return true
			end)
		else
			give_bonus_items()
		end
		tb_bonus_items = tb_bonus_items - 1
	end
end

--[TB] 2 x 50% CHANCE OF GETTING TWO MORE ITEMS FROM THE EXTRA-LISTS, st_msg_stash_title_1_5 SAYS "Hidden loot!"
function give_bonus_items()
	local rand_extraloot,rand_extraupgrades,rand_junks,rand_lootname,rand_upgradename,rand_junkname
	local bonusmessage = game.translate_string("st_msg_stash_title_1_5")
	local extrabonus = false
	
	
	--[CB] additions for mod upgrade item support
	if ui_mcm then
		cb_upgrades = ui_mcm.get("RF_package_patch/upgrades")
	end
	
	local upgradepool = tb_extraupgrades
	
	if (cb_upgrades == "streamlined") then
		upgradepool = CB_streamlined_extraupgrades
	end
	
	if (math.random() > 0.5) then
		local lootpick = math.random(#tb_extraloot)
		rand_extraloot = tostring(tb_extraloot[lootpick][1])
		rand_lootname = game.translate_string(tb_extraloot[lootpick][2])
		alife_create_item(rand_extraloot, db.actor)
		bonusmessage = bonusmessage .. "\\n- " .. tostring(rand_lootname)
		extrabonus = true
	end
	if (math.random() > 0.5) then
		local lootpick = math.random(#upgradepool)
		rand_extraupgrades = tostring(upgradepool[lootpick][1])
		rand_upgradename = game.translate_string(upgradepool[lootpick][2])
		alife_create_item(rand_extraupgrades, db.actor)
		bonusmessage = bonusmessage .. "\\n- " .. tostring(rand_upgradename)
		extrabonus = true
	end
	if (math.random() > 0.5) then
		local lootpick = math.random(#tb_junks)
		rand_junks = tostring(tb_junks[lootpick][1])
		rand_junkname = game.translate_string(tb_junks[lootpick][2])
		alife_create_item(rand_junks, db.actor)
		bonusmessage = bonusmessage .. "\\n- " .. tostring(rand_junkname)
		extrabonus = true
	end
	if extrabonus == true then
		CreateTimeEvent(0,"wait_one_second",1,function()
			actor_menu.set_item_news("success", "detail", bonusmessage)
			utils_obj.play_sound("device\\pda\\pda_guide_2")
			return true
		end)
	end
end

--[TB] SET tb_radio_has_run_once FLAG WHEN ADDING ADDON MID-GAME
--[TB] ADDED tb_radio_1_3_has_run_once FLAG for v1.3
--[TB] ADDED tb_radio_1_6_has_run_once FLAG for v1.6
--[CB] ADDED cb_1_4_has_run_once for QOL adjustment v1.4
function on_game_load()
	printf("--- Loading TBs_RF_Receiver_Hidden_Package_Sidequests_v1.8 ---")
	local m_data = alife_storage_manager.get_state()
	if not m_data.tb_radio_has_run_once then
		m_data.tb_radio_has_run_once = true
	end
	if not m_data.tb_radio_1_3_has_run_once then
		m_data.tb_radio_1_3_has_run_once = true
	end
	if not m_data.tb_radio_1_6_has_run_once then
		--COMMENT OUT CALL TO fix_queue_from_1_5_to_1_6 TO KEEP THE BIG QUEUE
		--(which should never have happened anyway)
		fix_queue_from_1_5_to_1_6()
		m_data.tb_radio_1_6_has_run_once = true
	end
	if not m_data.cb_1_4_has_run_once then
		m_data.cb_1_4_has_run_once = true
	end
end

--[TB] FUNCTION TO CLEAR THE PACKAGE QUEUE, LEAVING A FEW DEPENDING ON FACTION COUNT
function fix_queue_from_1_5_to_1_6()
	local tb_queue_num = #tb_package_queue
	local tb_map_names = {}
	local tb_new_queue = {}
	for i=1,#tb_package_queue do
		if not tb_map_names[tb_package_queue[i][2]] then
			tb_map_names[tb_package_queue[i][2]] = true
			table.insert(tb_new_queue,tb_package_queue[i])
		end
	end
	tb_package_queue = tb_new_queue
	printf("--- Cleaning v1.5 package queue for v1.6 | Queue size was: %s, is now: %s ---",tb_queue_num,#tb_package_queue)
end

--[TB] THIS RUNS FIRST TO REMIND PLAYER PACKAGE EXISTS IF ALREADY SPAWNED, ALSO SET GOODWILL POINTS CHECKER TIMER 30 SECONDS
--[CB] ADDED FAILSAFE THAT SPAWNS NEW PACKAGE SOMEWHERE ELSE IN THE LEVEL IF THE PACKAGE IS DELETED SOMEHOW AND RESTRUCTURED CHECK FOR 1.0F
function actor_on_first_update()
	if not note_given and tb_sufficient_passed then
		give_note()
	end
	CreateTimeEvent(0, "check_relation_change", 30, checkrelationchange)
	if (tb_package_active == true) and tb_target_item ~= 0 then
		local checkobj = alife_object(tb_target_item)
		if (checkobj) then
			CreateTimeEvent(0, "check_relation_change", 30, checkrelationchange)
			CreateTimeEvent(tb_target_item, "remind_about_radio_package", math.random(900,1800), remindaboutpackage)
			remindaboutpackage()
		else
			failsafepackagespawn()
		end
	end
end

--[CB]FAILSAFE FUNCTION TO SPAWN NEW PACKAGE IF PACKAGE IS DELETED SOMETIMES 1.1F
function failsafepackagespawn()
	tb_making_package = true
	local surge_state = GetEvent("surge", "state")
	local psi_storm_state = GetEvent("psi_storm", "state")
	if (surge_state) or (psi_storm_state) then
		tb_making_package = false
		return false
	end
	if GetEvent("underground") then
		tb_making_package = false
		return false	
	end
	if tb_making_package == true then
		item_radio.clear_target(tb_target_item)
		RemoveTimeEvent(tb_target_item,"remind_about_radio_package")
		tb_package_active = false
		tb_badguy_spawned = false
		tb_target_item = 0
		tb_target_item = 0
		tb_reminder = "empty"
		tb_package_in_level = "empty"
		tb_scan_time = 4000
		local actor_level, chosenmap, randspot, packagespot
		chosenmap = tb_previous_level
		tb_package_in_level = chosenmap
		randspot = math.random(1,#tb_package_coords[chosenmap])
		packagespot = tb_package_coords[chosenmap][randspot]
		local rpos = vector():set(packagespot[1],packagespot[2],packagespot[3])
		local rlvid = packagespot[4]
		local rgvid = packagespot[5]
		local availpacks = {"quest_tb_package_1","quest_tb_package_2","quest_tb_package_3","quest_tb_package_4","quest_tb_package_6"}
		local rfreq = math.random(30,300)
		tb_freq = rfreq
		local rlocat = packagespot[6]
		local rplace = packagespot[7]
		local se_obj
		se_obj = alife_create(tostring(availpacks[math.random(#availpacks)]),rpos,rlvid,rgvid)
		if se_obj then
			tb_target_item = se_obj.id
			tb_target_lvid = rlvid
			tb_target_gvid = rgvid
		end
		item_radio.add_target(se_obj.id, rfreq, 150)
		tb_package_active = true
		local anonpdamessage = game.translate_string("cb_package_lost") .. " " .. game.translate_string(rlocat) .. " " .. game.translate_string(rplace) .. game.translate_string("tb_use_rf_on_freq") .. " " .. tostring(rfreq) .. game.translate_string("tb_mhz_to_search")
		tb_reminder = game.translate_string("tb_dont_forget") .. " " .. game.translate_string(rlocat) .. " " .. game.translate_string(rplace) .. game.translate_string("tb_freq_was_on") .. " " .. tostring(rfreq) .. game.translate_string("tb_the_mhz")
		db.actor:give_game_news(game.translate_string("tb_anon_sender"), anonpdamessage, tb_sender_icon, 0, 20000, 0)
		utils_obj.play_sound("device\\pda\\pda_sos")
		CreateTimeEvent(tb_target_item, "remind_about_radio_package", math.random(900,1800), remindaboutpackage)
		tb_making_package = false
		CreateTimeEvent(0, "check_relation_change", 30, checkrelationchange)
		return true
	end
	tb_making_package = false
end

--[TB] CONSTANTLY RUNS TO CHECK IF PLAYER HOLDING RF RECEIVER AND CALL EXTRA BEEPS FUNCTION (IF PACKAGE EXISTS IN SAME LEVEL)
--[TB] ALSO CHECKS PLAYER DISTANCE FROM PACKAGE FOR CHANCE SPAWNING ENEMY NPCS
function actor_on_update()
	if (tb_package_active == true) and tb_package_in_level == level.name() then
		local tg = time_global()
		if tb_package_in_level ~= "l05_bar" then
			if (tg > tb_tg_badguys) then
				tb_tg_badguys = tg + 2000
				if tb_badguy_spawned == false then
					local dist_to_package = db.actor:position():distance_to(alife():object(tb_target_item).position)
					if (dist_to_package < 100) then
						spawn_some_badguys()
						tb_badguy_spawned = true
					end
				end
			end
		end
		
		local obj_det
		if reworked_rf_receiver_mcm then
			if reworked_rf_receiver_mcm.get_config("only_equip_rf") then
				obj_det = db.actor:item_in_slot(9)
			else
				obj_det = db.actor:active_detector()
			end
		else
			obj_det = db.actor:active_detector()
		end

		
		if not (obj_det and obj_det:section() == tb_device and obj_det:condition() >= obj_det:power_critical()) then
			return
		end
		if (tg > tb_tg_scan) then
			tb_tg_scan = tg + tb_scan_time
			boop_if_nearby()
		end
	end
end

--[TB] CHECK GOODWILL POINTS FOR EACH FACTION, IF HIGHER THAN BEFORE PLUS DIFFERENCE THEN RECORD GOODWILL, CALL PACKAGE CREATION IF APPROPRIATE
--[TB] ALSO CHECKS OR ADDS TO A QUEUE WITH FACTION MESSAGE IMAGE AND LEVEL OF GOODWILL RISE, CALLS PACKAGE CREATION IF APPROPRIATE
--[TB] ALSO RUNS A ONCE-ONLY MESSAGE TO TELL PLAYER ABOUT GETTING RF RECEIVER
--[TB] ONLY ONE PACKAGE CAN BE ACTIVE AT ONCE
--[TB] IF ADDON ADDED MID-GAME, USE THE FACTION BASE LEVELS FOR QUEUED PACKAGE LINK SPAWN
function checkrelationchange()
	if (not tb_making_package) then
		for i=1, 12 do
			local oldrelation = tb_relations[tb_factions[i]][1]
			local newrelation = relation_registry.community_goodwill(tb_factions[i], AC_ID)
			if newrelation >= oldrelation+tb_relation_diff then
				tb_sender_icon = tb_relations[tb_factions[i]][2]
				if tb_package_active == false then
					if tb_radio_thing() then
						tb_relations[tb_factions[i]][1] = newrelation
					end
					tb_sufficient_passed = true
				else
					local m_data = alife_storage_manager.get_state()
					if m_data.tb_package_active then
						table.insert(tb_package_queue,{level.name(),tb_relations[tb_factions[i]][2]})
						tb_relations[tb_factions[i]][1] = newrelation
					else
						table.insert(tb_package_queue,{tb_homebases[i],tb_relations[tb_factions[i]][2]})
						tb_relations[tb_factions[i]][1] = newrelation
					end
				end
			else
				if tb_package_queue[1] ~= nil then
					tb_radio_thing()
				end
			end
			if tb_sufficient_passed == false then
				if newrelation >= oldrelation+50 then
					tb_sender_icon = tb_relations[tb_factions[i]][2]
					tb_reminder = game.translate_string("tb_sooner_rf")
					db.actor:give_game_news(game.translate_string("tb_anon_sender"), tb_reminder, tb_sender_icon, 0, 20000, 0)
					utils_obj.play_sound("device\\pda\\pda_sos")
					tb_sufficient_passed = true
					give_note()
				end
			end
		end
		ResetTimeEvent(0,"check_relation_change",30)
	end
	ResetTimeEvent(0,"check_relation_change",30)
end

--[TB] REMINDS PLAYER ABOUT PACKAGE IF EXISTS
--[CB] ADDED CHECKS FOR MCM OPTION FUNCTIONALITY
function remindaboutpackage()
	if ui_mcm then
		cb_reminders = ui_mcm.get("RF_package_patch/reminders")
	end
	
	local cb_see_reminder = true
	if ((cb_reminders == "local" and tb_package_in_level ~= level.name()) or (cb_reminders == "never")) then
		cb_see_reminder = false
	end	

	if tb_package_active == true then
		if (cb_see_reminder == true) and GetEvent("underground") == false then
			db.actor:give_game_news(game.translate_string("tb_anon_sender"), tb_reminder, tb_sender_icon, 0, 10000, 0)
		end
		utils_obj.play_sound("device\\pda\\pda_alarm")
	end
	ResetTimeEvent(tb_target_item,"remind_about_radio_package",math.random(900,1800))
end

--[TB] CREATES A NEW PACKAGE BY CHOOSING APPROPRIATE LEVEL (CHECKS FOR PSY HELMET ALSO), SETS VARIABLES FOR item_radio.script TO TRACK PACKAGE
--[TB] ALSO SENDS PLAYER A MESSAGE, SETS REMINDER TIMER
function tb_radio_thing()
	tb_making_package = true
	local surge_state = GetEvent("surge", "state")
	local psi_storm_state = GetEvent("psi_storm", "state")
	if (surge_state) or (psi_storm_state) then
		tb_making_package = false
		return false
	end
	if GetEvent("underground") then
		tb_making_package = false
		return false
	end
	if tb_package_active == false then
		local actor_level, randpath, chosenmap, randspot, packagespot, suitablemapforpsyhelmet, sameaspreviousmap, suitablemapforgrokpsyfields, loop_success
		local actor_faction = get_actor_true_community()
		suitablemapforpsyhelmet = false
		sameaspreviousmap = false
		suitablemapforgrokpsyfields = false
		loop_success = false
		if tb_package_queue[1] ~= nil then
			actor_level = tb_package_queue[1][1]
			tb_sender_icon = tb_package_queue[1][2]
			table.remove(tb_package_queue,1)
		else
			actor_level = level.name()
		end
		if (tb_allmaps[actor_level]) then
			-- oleh5230
			-- limited loop iterations
			-- select level from default list if loop fails
			for i=1,25 do
				randpath = math.random(1,#tb_allmaps[actor_level])
				chosenmap = tb_allmaps[actor_level][randpath]
				if chosenmap == tb_previous_level then
					sameaspreviousmap = true
				else
					sameaspreviousmap = false
				end

				if (db.actor:object("bad_psy_helmet") ~= nil or db.actor:object("good_psy_helmet") ~= nil or actor_faction == "monolith" or actor_faction == "greh" or actor_faction == "zombied") then
					suitablemapforpsyhelmet = true
				else
					if (chosenmap == "l10_radar" or chosenmap == "l11_pripyat" or chosenmap == "l12_stancia" or chosenmap == "l12_stancia_2" or chosenmap == "l13_generators") then
						suitablemapforpsyhelmet = false
					else
						suitablemapforpsyhelmet = true
					end
				end

				-- oleh5230
				-- GAMMA extra psy fields condition
				if	grok_psy_fields_in_the_north and grok_psy_fields_in_the_north.psy_immune_factions[actor_faction]
				or	(has_alife_info("yan_labx16_switcher_primary_off") and has_alife_info("bar_deactivate_radar_done"))
				or	has_alife_info("story_mode_disabled")
				then
					suitablemapforgrokpsyfields = true
				else
					if grok_psy_fields_in_the_north and grok_psy_fields_in_the_north.psy_extra_levels[chosenmap] then
						suitablemapforgrokpsyfields = false
					else
						suitablemapforgrokpsyfields = true
					end
				end
				if not sameaspreviousmap and suitablemapforpsyhelmet and suitablemapforgrokpsyfields then loop_success = true break end
			end
		end
		if not loop_success then
			randpath = math.random(1,#tb_allmaps["default"])
			chosenmap = tb_allmaps["default"][randpath]
		end
		tb_previous_level = chosenmap
		tb_package_in_level = chosenmap
		randspot = math.random(1,#tb_package_coords[chosenmap])
		packagespot = tb_package_coords[chosenmap][randspot]
		local rpos = vector():set(packagespot[1],packagespot[2],packagespot[3])
		local rlvid = packagespot[4]
		local rgvid = packagespot[5]
		local availpacks = {"quest_tb_package_1","quest_tb_package_2","quest_tb_package_3","quest_tb_package_4","quest_tb_package_6"}
		local rfreq = math.random(30,300)
		tb_freq = rfreq
		local rlocat = packagespot[6]
		local rplace = packagespot[7]
		local se_obj
		se_obj = alife_create(tostring(availpacks[math.random(#availpacks)]),rpos,rlvid,rgvid)
		if se_obj then
			tb_target_item = se_obj.id
			tb_target_lvid = rlvid
			tb_target_gvid = rgvid
		end
		item_radio.add_target(se_obj.id, rfreq, 150)
		tb_package_active = true
		local anonpdamessage = game.translate_string("tb_package_can_be_found") .. " " .. game.translate_string(rlocat) .. " " .. game.translate_string(rplace) .. game.translate_string("tb_use_rf_on_freq") .. " " .. tostring(rfreq) .. game.translate_string("tb_mhz_to_search")
		tb_reminder = game.translate_string("tb_dont_forget") .. " " .. game.translate_string(rlocat) .. " " .. game.translate_string(rplace) .. game.translate_string("tb_freq_was_on") .. " " .. tostring(rfreq) .. game.translate_string("tb_the_mhz")
		db.actor:give_game_news(game.translate_string("tb_anon_sender"), anonpdamessage, tb_sender_icon, 0, 20000, 0)
		utils_obj.play_sound("device\\pda\\pda_sos")
		CreateTimeEvent(tb_target_item, "remind_about_radio_package", math.random(900,1800), remindaboutpackage)
		tb_making_package = false
		return true
	end
	tb_making_package = false
end

--[TB] THIS SPAWNS ENEMY NPCS AT PACKAGE LOACTION, A 50% CHANCE TO HAPPEN
--[TB] i CANNOT UNDERSTAND HOW TO USE AI LOGIC, OR SCHEMES... I HAVE TRIED SO HARD BUT I DON'T KNOW HOW :(
--[TB] CURRENTLY THE NPCS SPAWN IN AND START WALKING AROUND RANDOMLY, HOW DOES THE AI WORK?
function spawn_some_badguys()
	if (math.random() < 0.5) then
		local notfriends = {}
		local bg_array = {}
		local actor_faction = get_actor_true_community()
		for i=1,#tb_cut_factions do
			local friendorfoe = relation_registry.community_relation(actor_faction, tb_cut_factions[i])
			if friendorfoe < 0 then
				table.insert(notfriends,tb_cut_factions[i])
			end
		end
		local badguygroup = notfriends[math.random(#notfriends)]
		for i=1,math.random(1,2) do
			local abadguy = tb_maybe_badguys[badguygroup][math.random(#tb_maybe_badguys[badguygroup])]
			local abadguyVec = vector():set(alife():object(tb_target_item).position.x,alife():object(tb_target_item).position.y+5,alife():object(tb_target_item).position.z)
			local bg_obj = alife_create(abadguy,abadguyVec,tb_target_lvid,tb_target_gvid)
			if bg_obj then
				local bg_num = bg_obj.id
				table.insert(bg_array,bg_num)
			end
		end
	end
end

local lowbeep = sound_object("detectors\\tb_lowbeep")
local midbeep = sound_object("detectors\\tb_midbeep")
local highbeep = sound_object("detectors\\tb_highbeep")

local tb_lowbeep_flash_time = 200
local tb_midbeep_flash_time = 400
local tb_highbeep_flash_time = 600

--[TB] THIS PLAYS ADDITIONAL BEEPS, INCREASES THE SPEED OF BEEPS THE CLOSER THE PLAYER TO THE PACKAGE
function boop_if_nearby()
	if tb_package_active == true then
		local currentfreq = item_radio.get_freq()
		if tb_package_in_level == level.name() then
			if tb_target_item ~= 0 then
				if (currentfreq <= tb_freq+1) and (currentfreq >= tb_freq-1) then
					local se_obj = alife_object(tb_target_item)
					if se_obj then
						local objpos = se_obj.position
						local dist_pos = db.actor:position():distance_to(objpos)
						-- local lowbeep = ("detectors\\tb_lowbeep")
						-- local midbeep = ("detectors\\tb_midbeep")
						-- local highbeep = ("detectors\\tb_highbeep")
						if dist_pos < 10 then
							item_radio.tb_sound_object = highbeep
							item_radio.tb_flash_time = tb_lowbeep_flash_time
							item_radio.tb_in_range = true
							
							tb_scan_time = 1000
							highbeep:play(db.actor, 0, sound_object.s2d)
							-- xr_effects.play_snd(actor, nil, {
							-- [1] = highbeep
							-- })
						end
						if (dist_pos >= 10) and (dist_pos < 50) then
							item_radio.tb_sound_object = midbeep
							item_radio.tb_flash_time = tb_midbeep_flash_time
							item_radio.tb_in_range = true
							
							tb_scan_time = 2000
							midbeep:play(db.actor, 0, sound_object.s2d)
							-- xr_effects.play_snd(actor, nil, {
							-- [1] = midbeep
							-- })
						end
						if (dist_pos >= 50) and (dist_pos < 75) then
							item_radio.tb_sound_object = lowbeep
							item_radio.tb_flash_time = tb_lowbeep_flash_time
							item_radio.tb_in_range = true
							
							tb_scan_time = 3000
							lowbeep:play(db.actor, 0, sound_object.s2d)
							-- xr_effects.play_snd(actor, nil, {
							-- [1] = lowbeep
							-- })
						end
						if (dist_pos >= 75) and (dist_pos < 150) then
							item_radio.tb_in_range = false
							item_radio.tb_sound_object = false
							
							tb_scan_time = 4000
						end
					end
				end
			end
		end
	end
end

--[TB] WATCHES ITEM PICKUPS, CHECKS IF ITEM IS A tb_package, REMOVES THE tb_package, CREATES REAL PACKAGE IN INVENTORY
--[CB] ADDED MCM FUNCTIONALITY TO ALLOW CHOICE BETWEEN AUTOMATIC OR MANUAL UNPACKING 
function actor_on_item_take(item)
	local itemid = item:id()
	local itemname = item:section()
	local invobj = 0
	if ui_mcm then
		cb_unpack = ui_mcm.get ("RF_package_patch/unpacking")
	end	
	if (itemid == tb_target_item) and tb_package_active == true then
		item_radio.clear_target(tb_target_item)
		RemoveTimeEvent(tb_target_item,"remind_about_radio_package")
		tb_package_active = false
		tb_badguy_spawned = false
		tb_target_item = 0
		tb_target_item = 0
		tb_reminder = "empty"
		tb_package_in_level = "empty"
		tb_scan_time = 4000
		
		item_radio.tb_in_range = false
		item_radio.tb_sound_object = false
		item_radio.tb_flash_time = 0
	end
	if string.find(itemname,"quest_tb_package_") then		
		for i=1, 8 do
			local checkname = "quest_tb_package_" .. tostring(i)
			local givename = "quest_package_" .. tostring(i)
			if itemname == checkname then
				if tb_bonus_items == nil then
					tb_bonus_items = 0
				end
				tb_bonus_items = tb_bonus_items + 1
				invobj = alife_create_item(givename, db.actor)
				if cb_unpack == "automatic" then
					CreateTimeEvent(0,".5_second_delay",0.5,function()
						itms_manager.use_package_random(get_object_by_id(invobj.id))
						return true
					end)
				end
				alife_release(item)
			end
		end
	end
end

--[CB] NOTE-GIVING FUNCTION FOR PDA ENTRY
function give_note()
	if not note_given then
		ui_pda_encyclopedia_tab.unlock_note("encyclopedia__notes_rfpackages")
		note_given = true
	end
end

--[TB] TO SAVE VARIABLE DATA
function save_state(m_data)
	m_data.tb_target_item = tb_target_item
	m_data.tb_sufficient_passed = tb_sufficient_passed
	m_data.tb_package_active = tb_package_active
	m_data.tb_reminder = tb_reminder
	m_data.tb_package_in_level = tb_package_in_level
	m_data.tb_freq = tb_freq
	m_data.tb_sender_icon = tb_sender_icon
	m_data.tb_relations = tb_relations
	m_data.tb_package_queue = tb_package_queue
	m_data.tb_target_lvid = tb_target_lvid
	m_data.tb_target_gvid = tb_target_gvid
	m_data.tb_bonus_items = tb_bonus_items
	m_data.tb_badguy_spawned = tb_badguy_spawned
	m_data.tb_previous_level = tb_previous_level
	m_data.cb_note_given = cb_note_given
end

--[TB] TO LOAD VARIABLE DATA
--[TB] USING tb_radio_has_run_once FLAG FOR ADDING ADDON MID-GAME ELSE NIL DATA IS SET ON GAME LOAD
--[TB] ADDED tb_radio_1_3_has_run_once FLAG
function load_state(m_data)
	local m_data = alife_storage_manager.get_state()
	if m_data.tb_radio_has_run_once then
		tb_target_item = m_data.tb_target_item
		tb_sufficient_passed = m_data.tb_sufficient_passed
		tb_package_active = m_data.tb_package_active
		tb_reminder = m_data.tb_reminder
		tb_package_in_level = m_data.tb_package_in_level
		tb_freq = m_data.tb_freq
		tb_sender_icon = m_data.tb_sender_icon
		tb_relations = m_data.tb_relations
		tb_package_queue = m_data.tb_package_queue
	end
	if m_data.tb_radio_1_3_has_run_once then
		tb_target_lvid = m_data.tb_target_lvid
		tb_target_gvid = m_data.tb_target_gvid
		tb_bonus_items = m_data.tb_bonus_items
		tb_badguy_spawned = m_data.tb_badguy_spawned
	end
	if m_data.tb_radio_1_6_has_run_once then
		tb_previous_level = m_data.tb_previous_level
	end
	if m_data.cb_radio_1_4_has_run_once then
		cb_note_given = m_data.cb_note_given
	end
end

--[TB] REQUIRED FUNCTION TO REGISTER CALLBACKS
--[CB] ADDED FUNCTOR AUTOINJECTOR FOR PDA RIGHT CLICK OPTION
function on_game_start()
	RegisterScriptCallback("on_game_load",on_game_load)
	RegisterScriptCallback("actor_on_update",actor_on_update)
	RegisterScriptCallback("actor_on_first_update",actor_on_first_update)
	RegisterScriptCallback("actor_on_item_take",actor_on_item_take)
	RegisterScriptCallback("save_state",save_state)
	RegisterScriptCallback("load_state",load_state)
	custom_functor_autoinject.add_functor("pda_package_cancel", is_pda_and_charged, pda_ui_option, pda_cancellable_package, package_cancel, true)
end
