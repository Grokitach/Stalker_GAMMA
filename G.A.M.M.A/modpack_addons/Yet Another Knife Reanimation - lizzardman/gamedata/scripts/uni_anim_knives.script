local common = animation_common
common.add_flag("QUICK_KNIFE")

--copied from DAR just in case
force_quick = false


--Code from DAR
-- Compatibility for FDDA: Use '_quick' if an FDDA animation is about to play
if enhanced_animations then
    fdda_anim_prepare = enhanced_animations.anim_prepare
    function enhanced_animations.anim_prepare()
        force_quick = true
        fdda_anim_prepare()
    end

    fdda_call_my_slot_back = enhanced_animations.call_my_slot_back
    function enhanced_animations.call_my_slot_back()
        local result = fdda_call_my_slot_back()
        if result == true then
            force_quick = false
        end
        return result
    end

    fdda_bp_call_my_slot_back = zzz_ea_addon_backpack.call_my_slot_back
    function zzz_ea_addon_backpack.call_my_slot_back()
        local result = fdda_bp_call_my_slot_back()
        if result == true then
            force_quick = false
        end
        return result
    end
end


-- Compatibility for Headgear Animations
if headgear_animations then
    ha_prepare_for_animation = headgear_animations.prepare_for_animation
    function headgear_animations.prepare_for_animation(m_section)
        force_quick = true
        ha_prepare_for_animation(m_section)
    end

    ha_restore_after_animation = headgear_animations.restore_after_animation
    function headgear_animations.restore_after_animation()
        force_quick = false
        ha_restore_after_animation()
    end
end


-- Switching to PDA (PDA keybind)
-- Beefs nvg switch
-- function on_key_press(dik)
--     local bind = dik_to_bind(dik)

--     -- Quickhide detector when switching on beefs nvgs
--     if z_beefs_nvgs and bind == key_bindings.kNIGHT_VISION and db.actor:active_detector() then
--         force_quick = true
--         return
--     end

--     -- PDA keybind
--     if bind ~= key_bindings.kACTIVE_JOBS then return end

--     -- Detector drawn
--     if not db.actor:active_detector() then return end

--     -- PDA equipped
--     if not db.actor:item_in_slot(8) then return end

--     force_quick = true
-- end

--TODO: adop for knife
-- Switching to PDA (Map keybind)
-- function actor_on_first_update()
--     local activate_slot = db.actor.activate_slot
--     db.actor.activate_slot = function(self, slot_num)
--         if slot_num == 1 and db.actor:active_detector() then
--             force_quick = true
--         end
--         activate_slot(self, slot_num)
--     end
-- end


--TODO:test if it works for knife
-- Quick throw grenade
local Hit_GrenadeQuickthrow = actor_effects.Hit_GrenadeQuickthrow
function actor_effects.Hit_GrenadeQuickthrow()
    if (not actor_effects.allow_animation())
        or (not db.actor:item_in_slot(4))
        or db.actor:get_current_holder() ~= nil
    then
        return
    end

    force_quick = true

    Hit_GrenadeQuickthrow()
end


---@param item game_object
local function is_item_valid(item)
    if item then
        local sec = item:section()
        if sec then
            knife_equipped = string.match(tostring(sec), "knife")
            if knife_equipped == "knife" then
                return true
            end
        end
    end

    return false
end


---@param anm_table any
---@param item game_object
local function anm_quick_knife(anm_table, item)
    -- cancel if parent is not player
    local parent = item:parent()
    if not parent then return end
    if parent:id() ~= AC_ID then return end

    -- cancel if not valid item
    if not is_item_valid(item) then return end

    -- Add 'quick' if previous anim was also quick (intended for holster-draw pairs)
    if common.get_flag("QUICK_KNIFE") then
        if string.find(anm_table.anm_name, "show") then
            common.mutate_anim(anm_table, "_fast", item:section())
        end
        common.remove_flag("QUICK_KNIFE")
        return
    end

    if (
            string.find(anm_table.anm_name, "hide")
            and (
                -- player_wpn and is_state_valid[player_wpn:get_state()]
                IsMoveState("mcClimb")
                or force_quick
            )
        ) then
        common.mutate_anim(anm_table, "_fast", item:section())
        common.set_flag("QUICK_KNIFE")
        force_quick = false
    end
end
common.add_anim_mutator(anm_quick_knife, 5)



-- Animation: Sequentially select between variants of the same animation
local last_i = 0
local last_hit_t = 0
local combo_reset_t = 1000 --should be loaded from anim config file
local function anm_secuential_variants(anm_table, item)
    local section = item:section()
    local variants = { anm_table.anm_name }
    local i = 2
    while (true) do
        local anm_variant = anm_table.anm_name .. "_svariant" .. (i - 1)
        if common.has_animation(section, anm_variant) then
            variants[i] = "_svariant" .. (i - 1)
        else
            break
        end
        i = i + 1
    end
    if #variants > 1 then
        --reset combo timer
        local current_t = time_global()
        if (current_t - last_hit_t) > combo_reset_t then
            last_i = 0
        end
        --pick next attack
        local next_i = last_i + 1
        next_i = next_i > #variants and 1 or next_i
        last_i = next_i
        last_hit_t = current_t
        common.mutate_anim(anm_table, variants[next_i], section)
    end
end
common.add_anim_mutator(anm_secuential_variants, 4)


-- function on_game_start()
--     RegisterScriptCallback("actor_on_first_update", actor_on_first_update)
--     RegisterScriptCallback("on_key_press", on_key_press)
-- end
