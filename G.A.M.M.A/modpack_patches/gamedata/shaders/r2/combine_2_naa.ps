#include "common.h"
#include "anomaly_shaders.h"
//////////////////////////////////////////////////////////////////////////////////////////
struct 	v2p
{
  float4 tc0: 		TEXCOORD0;	// Center
  float4 tc1: 		TEXCOORD1;	// LT 		 
  float4 tc2: 		TEXCOORD2;	// RB
  float4 tc3: 		TEXCOORD3;	// RT 
  float4 tc4: 		TEXCOORD4;	// LB
  float4 tc5:		TEXCOORD5;	// Left	/ Right	
  float4 tc6:		TEXCOORD6;	// Top  / Bottom 
};

//////////////////////////////////////////////////////////////////////////////////////////
uniform sampler2D s_distort;
uniform float4 e_barrier;	// x=norm(.8f), y=depth(.1f), z=clr
uniform float4 e_weights;	// x=norm, y=depth, z=clr
uniform float4 e_kernel;	// x=norm, y=depth, z=clr

uniform float4 vignette_control;

//////////////////////////////////////////////////////////////////////////////////////////
#define	EPSDEPTH 0.001h
//////////////////////////////////////////////////////////////////////////////////////////
#include "mblur.h"
#include "img_corrections.h"
#include "tonemapping.h"
//////////////////////////////////////////////////////////////////////////////////////////
// Pixel
float4 	main		( v2p I )	: COLOR
{
#ifdef 	USE_DISTORT
  	float 	depth 	= tex2D 	(s_position, 	I.tc0).z;
	float4 	distort	= tex2D		(s_distort, 	I.tc0)	;
	float2	offset	= (distort.xy-(127.0h/255.0h))*def_distort;  // fix newtral offset
	float2	center	= I.tc0 + offset;
	float 	depth_x	= tex2D 	(s_position, center).z	;
	if ((depth_x+EPSDEPTH)<depth)	center	= I.tc0;	// discard new sample
#else
	float2	center 	= I.tc0		;
#endif

	float3 img = tex2D(s_image, center);
    float4 bloom = tex2D(s_bloom,center);

	img = mblur(center,tex2D(s_position,I.tc0),img.rgb);

	img = blend_soft(img,bloom.xyz*bloom.w);
	
	if (tnmp_onoff == 1.0)
	{		
		img = Uncharted2ToneMapping(img);
	}	
	
	img = img_corrections(img);

	{
		/*
		Vignette.
		vignette_control.x 0->1: Darken the corners of the screen.
		vignette_control.y 0->1: Darken the center of the screen.
		vignette_control.z 0->1: Expand the dark edges toward the center.
		*/
		float2 mid_tc = I.tc0.xy - 0.5;
		float num = sqrt(dot(mid_tc, mid_tc)) * 2; /* [0.0:sqrt(2.0)] */
		float edge_radius = sqrt(2.0) * (1.0 - saturate(vignette_control.z));
		/* Make sure to avoid division by zero. */
		if (num > edge_radius)
			num = 1.0;
		else if (edge_radius == 0)
			num = 0.0;
		else
			num = num / edge_radius;
		img *= lerp(1.0 - vignette_control.y, 1.0 - vignette_control.x, saturate(num));
	}

#ifdef 	USE_DISTORT
 	float3	blurred	= bloom*def_hdr	;
			img		= lerp	(img,blurred,distort.z);
#endif


	return 	float4(img,1.0);
}
