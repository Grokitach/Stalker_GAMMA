--- HDR10 options tree

-- Import smart constructors
options_builder.import_into(this)

-- Options page
PAGE = page {
	{ id = "hdr10" },
	list_bool {
		id = "enabled",
		curr = function()
			return get_console_cmd(0, "r4_hdr10_on")
		end,
		cmd = "r4_hdr10_on",
		restart = true,
	},
	button {
		id = "live_editing",
		functor_ui = function(self)
			return this.start_hdr_live_editing_ui(self)
		end,
		precondition = function()
			return this.level_present() and get_console_cmd(1, "r4_hdr10_on")
		end,
	},
	track {
		id = "whitepoint_nits",
		tag = "hdr10",
		def = 400,
		step = 10,
		cmd = "r4_hdr10_whitepoint_nits",
	},
	track {
		id = "ui_nits",
		tag = "hdr10",
		def = 400,
		step = 10,
		cmd = "r4_hdr10_ui_nits",
	},
	track {
		id = "pda_intensity",
		tag = "hdr10",
		def = 1,
		step = 0.01,
		cmd = "r4_hdr10_pda_intensity",
	},
	list_enum {
		id = "colorspace",
		tag = "hdr10",
		curr = function()
			return get_console_cmd(0, "r4_hdr10_colorspace")
		end,
		content = {
			"hdr10_colorspace_rec709",
			"hdr10_colorspace_p3d65",
			"hdr10_colorspace_rec2020"
		},
		cmd = "r4_hdr10_colorspace",
	},
	list_enum {
		id = "tonemapper",
		tag = "hdr10",
		curr = function()
			return get_console_cmd(0, "r4_hdr10_tonemapper")
		end,
		content = {
			"hdr10_tonemapper_aces_narkowicz",
			"hdr10_tonemapper_aces_hill",
			"hdr10_tonemapper_agx_normal",
			"hdr10_tonemapper_agx_punchy",
			"hdr10_tonemapper_uchimura",
			"hdr10_tonemapper_stevem",
			"hdr10_tonemapper_uncharted2",
			"hdr10_tonemapper_reinhard1",
			"hdr10_tonemapper_reinhard2",
		},
		cmd = "r4_hdr10_tonemapper",
	},
	list_enum {
		id = "tonemap_mode",
		tag = "hdr10",
		curr = function()
			return get_console_cmd(0, "r4_hdr10_tonemap_mode")
		end,
		content = {
			"hdr10_tonemap_mode_luminance",
			"hdr10_tonemap_mode_color"
		},
		cmd = "r4_hdr10_tonemap_mode",
	},
	track {
		id = "brightness",
		tag = "hdr10",
		def = 0.0,
		step = 0.001,
		cmd = "r4_hdr10_brightness",
	},
	track {
		id = "gamma",
		tag = "hdr10",
		def = 1.1,
		step = 0.01,
		cmd = "r4_hdr10_gamma",	
	},
	track {
		id = "exposure",
		tag = "hdr10",
		def = 0.8,
		step = 0.05,
		cmd = "r4_hdr10_exposure",
	},
	track {
		id = "contrast",
		tag = "hdr10",
		def = 0.0,
		step = 0.01,
		cmd = "r4_hdr10_contrast",
	},
	track {
		id = "contrast_middle_gray",
		tag = "hdr10",
		def = 0.5,
		step = 0.01,
		cmd = "r4_hdr10_contrast_middle_gray",
	},
	track {
		id = "saturation",
		tag = "hdr10",
		def = 0.1,
		step = 0.01,
		cmd = "r4_hdr10_saturation",
	},
	track {
		id = "ui_saturation",
		tag = "hdr10",
		def = 0.5,
		step = 0.01,
		cmd = "r4_hdr10_ui_saturation",
	},
					
	line {},
					
	list_bool {
		id = "bloom_on",
		tag = "hdr10",
		curr = function()
			return get_console_cmd(0, "r4_hdr10_bloom_on")
		end,
		cmd = "r4_hdr10_bloom_on",
	},
	track {
		id = "bloom_blur_passes",
		tag = "hdr10",
		def = 20,
		step = 1,
		cmd = "r4_hdr10_bloom_blur_passes",
	},
	track {
		id = "bloom_blur_scale",
		tag = "hdr10",
		def = 1.0,
		step = 0.01,
		cmd = "r4_hdr10_bloom_blur_scale",
	},
	track {
		id = "bloom_intensity",
		tag = "hdr10",
		def = 0.06,
		step = 0.01,
		cmd = "r4_hdr10_bloom_intensity",
	},
					
	line {},
					
	list_bool {
		id = "flare_on",
		tag = "hdr10",
		curr = function()
			return get_console_cmd(0, "r4_hdr10_flare_on")
		end,
		cmd = "r4_hdr10_flare_on",
	},
	track {
		id = "flare_threshold",
		tag = "hdr10",
		def = 0,
		step = 0.1,
		cmd = "r4_hdr10_flare_threshold",
	},
	track {
		id = "flare_power",
		tag = "hdr10",
		def = 0.04,
		step = 0.01,
		cmd = "r4_hdr10_flare_power",
	},
	track {
		id = "flare_ghosts",
		tag = "hdr10",
		def = 1,
		step = 1,
		cmd = "r4_hdr10_flare_ghosts",
	},
	track {
		id = "flare_ghost_dispersal",
		tag = "hdr10",
		def = 0.6,
		step = 0.01,
		cmd = "r4_hdr10_flare_ghost_dispersal",
	},
	track {
		id = "flare_center_falloff",
		tag = "hdr10",
		def = 1.1,
		step = 0.1,
		cmd = "r4_hdr10_flare_center_falloff",
	},
	track {
		id = "flare_halo_scale",
		tag = "hdr10",
		def = 0.47,
		step = 0.01,
		cmd = "r4_hdr10_flare_halo_scale",
	},
	track {
		id = "flare_halo_ca",
		tag = "hdr10",
		def = 10.0,
		step = 0.1,
		cmd = "r4_hdr10_flare_halo_ca",
	},
	track {
		id = "flare_ghost_ca",
		tag = "hdr10",
		def = 3.0,
		step = 0.1,
		cmd = "r4_hdr10_flare_ghost_ca",
	},
	track {
		id = "flare_blur_passes",
		tag = "hdr10",
		def = 12,
		step = 1,
		cmd = "r4_hdr10_flare_blur_passes",
	},
	track {
		id = "flare_blur_scale",
		tag = "hdr10",
		def = 1.0,
		step = 0.01,
		cmd = "r4_hdr10_flare_blur_scale",
	},
	track {
		id = "flare_ghost_intensity",
		tag = "hdr10",
		def = 0.04,
		step = 0.01,
		cmd = "r4_hdr10_flare_ghost_intensity",
	},
	track {
		id = "flare_halo_intensity",
		tag = "hdr10",
		def = 0.04,
		step = 0.01,
		cmd = "r4_hdr10_flare_halo_intensity",
	},
					
	line {},
					
	list_bool {
		id = "sun_on",
		tag = "hdr10",
		curr = function()
			return get_console_cmd(0, "r4_hdr10_sun_on")
		end,
		cmd = "r4_hdr10_sun_on",
	},
	track {
		id = "sun_intensity",
		tag = "hdr10",
		def = 80.0,
		step = 1.0,
		cmd = "r4_hdr10_sun_intensity",
	},
	track {
		id = "sun_inner_radius",
		tag = "hdr10",
		def = 0.2,
		step = 0.01,
		cmd = "r4_hdr10_sun_inner_radius",
	},
	track {
		id = "sun_outer_radius",
		tag = "hdr10",
		def = 0.4,
		step = 0.01,
		cmd = "r4_hdr10_sun_outer_radius",
	},
}

--- Live editing implementation

function level_present()
    return level.present()
end

function start_hdr_live_editing_ui(self)
    self:On_Cancel()
    start()
end

local precision = 3

local hdr_live_editing_commands = (function()
    local t = {}

    for i, v in ipairs(PAGE.gr) do
    	if v.tag and v.tag == "hdr10" then
    		t[#t + 1] = v
    	end
    end

    return t
end)()

HDRLiveEditingGUI = nil -- instance, don't touch
function start()
    exec_console_cmd("main_menu off")
            
    if not HDRLiveEditingGUI then
        HDRLiveEditingGUI = HDRLiveEditingControl()
    end

    if HDRLiveEditingGUI and not HDRLiveEditingGUI:IsShown() then
        HDRLiveEditingGUI:ShowDialog(true)
        Register_UI("HDRLiveEditingControl","ui_options_modded_exes")
    end
end

-------------------------------------------------------------------
class "HDRLiveEditingControl" (CUIScriptWnd)

function HDRLiveEditingControl:__init() super()
    self:InitControls()
    RegisterScriptCallback("actor_on_net_destroy", self)
end

function HDRLiveEditingControl:__finalize()
end

function HDRLiveEditingControl:actor_on_net_destroy()
    self:Close()
    HDRLiveEditingGUI = nil
end

function HDRLiveEditingControl:InitControls()
    self:SetWndRect(Frect():set(0,0,1024,768))
    self:SetAutoDelete(true)
        
    self.xml = CScriptXmlInit()
        
    local xml = self.xml
    xml:ParseFile("ui_ctrl_hdr.xml")
        
    self.dialog = xml:InitStatic("ctrl_hdr", self)
    -- self.dialog:SetWndPos(vector2():set(self.dialog:GetWndPos().x - 150, 400))
    -- self.dialog:SetWndSize(vector2():set(self.dialog:GetWidth() + 300, 300))
        
    self.frame = xml:InitFrame("ctrl_hdr:frame", self.dialog)
    -- self.frame:SetWndSize(vector2():set(self.frame:GetWidth() + 300, 300))

    local cap = xml:InitStatic("ctrl_hdr:cap_main",self.dialog)
	-- local cap_pos = cap:GetWndPos()
    cap:TextControl():SetText("Offsets")
	-- cap:SetWndPos(vector2():set(cap_pos.x + 150, cap_pos.y))

    self.scroll = xml:InitScrollView("ctrl_hdr:scroll", self.dialog)
    -- self.scroll:SetWndSize(vector2():set(self.scroll:GetWidth() + 300, 225))
    self.scroll:Clear()
        
    self.Track = {}
    self.Value = {}
    self.Num = {}
    for i=1, #hdr_live_editing_commands do
        local _st = xml:InitStatic("ctrl_hdr:st", nil)
			
            
        local tbl = hdr_live_editing_commands[i]
        local name = tbl.id

        local value = get_console_cmd(0, tbl.cmd)
        local string_value = value
        if tbl.val == 0 then
            value = tonumber(value)
        elseif tbl.val == 1 then
            if value == "true" or value == "1" then
            	value = true
            else
            	value = false
            end
        elseif tbl.val == 2 then
            value = tonumber(value)
        end

        local cap = xml:InitStatic("ctrl_hdr:cap", _st)
        cap:TextControl():SetText(game.translate_string(("ui_mm_modded_exes_visual_hdr10_%s"):format(name)))

        local function getMinOrMax(min)
            if tbl.type == "track" then
            	return min and tbl.min or tbl.max
            elseif tbl.type == "list" then
            	local t = tbl.content[1]()
            	table.sort(t, function(a, b)
            		if min then return tonumber(a[1]) < tonumber(b[1]) end
            		return tonumber(a[1]) > tonumber(b[1])
            	end)
            	return t[1][1]
            end
        end

        local step = tbl.type == "track" and tbl.step or 1
        local min = getMinOrMax(true)
        local max = getMinOrMax()
        local val = tonumber(value)

        self.Track[i] = xml:InitTrackBar("ctrl_hdr:track", _st)
		-- local track_pos = self.Track[i]:GetWndPos()
		-- self.Track[i]:SetWndPos(vector2():set(track_pos.x + 250, track_pos.y))
        self.Track[i]:SetStep(step)
        self.Track[i]:SetOptFBounds(min, max)
        self.Track[i]:SetFValue(val)
        self.Value[i] = val
        self.Num[i] = xml:InitTextWnd("ctrl_hdr:num", _st)
		-- self.Num[i]:SetWndSize(vector2():set(self.Num[i]:GetWidth() + 50, self.Num[i]:GetHeight()))
		-- local num_pos = self.Num[i]:GetWndPos()
		-- self.Num[i]:SetWndPos(vector2():set(num_pos.x + 250, num_pos.y))

        local display_text = val
        if tbl.type == "list" then
            for k, v in pairs(tbl.content[1]()) do
            	if v[1] == string_value then
            		display_text = game.translate_string(("ui_mm_lst_%s"):format(v[2]))
            		break
            	end
            end
        end
        self.Num[i]:SetText(display_text)
            
        self.scroll:AddWindow(_st, true)
        _st:SetAutoDelete(true)
    end
end

function HDRLiveEditingControl:Callback_Track(i, val)
    local cmd = hdr_live_editing_commands[i].cmd
    local res = ("%s %s"):format(cmd, val)
    exec_console_cmd(res)
    printf_me(res)

    local display_text = val

    local tbl = hdr_live_editing_commands[i]
    if tbl.type == "list" then
        for k, v in pairs(tbl.content[1]()) do
        	if v[1] == tostring(val) then
        		display_text = game.translate_string(("ui_mm_lst_%s"):format(v[2]))
				break
        	end
        end
    end

    self.Num[i]:SetText(display_text)
end

function HDRLiveEditingControl:Update()
    CUIScriptWnd.Update(self)
        
    -- Hack to simulate tracing method for TrackBar value changes. TODO: add callback support for CUITrackBar in engine, this is just silly
    for i,ctrl in pairs(self.Track) do
        if ctrl:IsCursorOverWindow() then
            local val = round_idp(ctrl:GetFValue(), precision)
            if (val ~= self.Value[i]) then
                self.Value[i] = val
                self:Callback_Track(i, val)
                return
            end
        end
    end
end

function HDRLiveEditingControl:OnKeyboard(dik, keyboard_action)
    local res = CUIScriptWnd.OnKeyboard(self,dik,keyboard_action)
    if (res == false) then
        local bind = dik_to_bind(dik)
        if keyboard_action == ui_events.WINDOW_KEY_PRESSED then
            
            if dik == DIK_keys.DIK_ESCAPE then
                self:Close()
            end

        end
    end

    return res
end

function HDRLiveEditingControl:Close()
    self:HideDialog()
    self:Show(false)

    Unregister_UI("HDRLiveEditingControl")
    HDRLiveEditingGUI = nil
end
