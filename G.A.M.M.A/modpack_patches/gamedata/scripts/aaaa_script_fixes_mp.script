-- Fixes to scripts via monkey patches

function get_game_version()
	local function table_of_strings_to_number(t)
		local res = {}
		for i, v in ipairs(t) do
			res[i] = tonumber(v)
		end
		if not res[2] then res[2] = 0 end
		if not res[3] then res[3] = 0 end
		return res
	end
	return GAME_VERSION and table_of_strings_to_number(str_explode(GAME_VERSION, "%.")) or {0, 0, 0}
end

-- Correct behaviour of actor_on_item_before_pickup callback
function bind_stalker_ext.actor_on_item_before_pickup(item) -- called from engine!
	-- Called when actor is pressing use key to pick up an item
	-- return false will prevent actor from pickup the item
	local flags = { ret_value = true }
	SendScriptCallback("actor_on_item_before_pickup",item,flags)
	return flags.ret_value
end

-- Fix to NPC PDA not working with active weapon when using "view" function
-- Thanks Catspaw for testing
function ui_pda_npc_tab.use_view(obj)
	local p = obj:parent()
	if not (p and p:id() == AC_ID) then
		return
	end
	
	hide_hud_inventory()
	
	if get_console_cmd(1,"g_3d_pda") then
		db.actor:make_item_active(obj)
		ActorMenu.get_pda_menu():SetActiveSubdialog("eptNPC")
	else
		db.actor:move_to_slot(obj, 14)

		if db.actor:active_slot() ~= 0 then
			db.actor:activate_slot(0)
		end

		local tg = time_global()
		CreateTimeEvent(0, "delay_2d_pda_draw", 0, function()
			if time_global() - tg > 5000 then
				-- timeout
				return true
			end
			if not db.actor:active_item() then
				ActorMenu.get_pda_menu():ShowDialog(true) 
				ActorMenu.get_pda_menu():SetActiveSubdialog("eptNPC") 
				return true
			end
		end)
	end
end

-- NLTP_ASHES: Fix for ActorMenu_on_item_after_move callback sending nil values
do
	local ver = get_game_version()
	if ver[2] <= 5 and ver[3] <= 2 then
		ui_inventory_UIInventory_Action_Move = ui_inventory.UIInventory.Action_Move
		function ui_inventory.UIInventory:Action_Move(obj, bag)
		  obj = self:CheckItem(obj,"Action_Move")
		  if obj then
		    ui_inventory_UIInventory_Action_Move(self, obj, bag)
		  end
		end
	end
end

-- item_device and itms_manager faulty callbacks with flags
item_device_on_anomaly_touch = item_device.on_anomaly_touch
item_device.on_anomaly_touch = function(obj, flags)
	if flags.ret_value then
		item_device_on_anomaly_touch(obj, flags)
	end
end

itms_manager_actor_on_item_before_use = itms_manager.actor_on_item_before_use
itms_manager.actor_on_item_before_use = function(obj, flags)
	if flags.ret_value then
		itms_manager_actor_on_item_before_use(obj, flags)
	end
end

-- xrs_facer faulty hit_callback
function xrs_facer.hit_callback(obj, amount, dir, who, bone_index)
	if not xrs_facer.Enabled then return end
	if bone_index == "from_death_callback" then return end
	if not db.storage[obj:id()].facer then return end

	if who and (IsStalker(who) or IsMonster(who)) and who:alive() and xrs_facer.check_enemy(who, obj) then
		local target_id = load_var(obj, "facer_target", nil)
		local target = target_id and db.storage[target_id] and db.storage[target_id].object
		if
			not target
			or obj:relation(target) ~= game_object.enemy
			or target:position():distance_to_sqr(obj:position()) > 4
		then
			save_var(obj, "facer_target", who:id())
			db.storage[obj:id()].facer.check_time = time_global() + xrs_facer.facer_sets.check_prd
		end
	end
end

-- axr_trade_manager npc trading fixes
function axr_trade_manager.npc_trade_buy_sell(npc)
	local id = npc and npc:id()
	local st = id and db.storage[id]
	if not (st) then
		return
	end

	if not (st.has_items_to_sell) then
		--printf("st.has_items_to_sell = nil!")
		return
	end

	if not (st.trade_items) then
		--printf("no items to sell")
		return
	end

	local smart = xr_gulag.get_npc_smart(npc)
	local npc_info = smart and smart.npc_info[id]
	if (npc_info) then
		npc_info.job.idle = time_global() + 20000
	end

	printf("- NPC Trade | Selling")

	local se_obj = alife_object(id)
	if not (se_obj) then
		return
	end

	-- Get the Trader
	local smart = xr_gulag.get_npc_smart(npc)
	local npc_info = smart and smart.npc_info[id]
	local seller_id = npc_info and npc_info.job and npc_info.job.seller_id
	local seller = seller_id and (db.storage[seller_id] and db.storage[seller_id].object or level.object_by_id(seller_id))
	printf("- NPC Trade | Trader = %s", seller and seller:name())
	
	-- SELL ITEMS
	local itm,itm_base_cost,buy_sell, slot, bw,can_sell
	for sec,count in pairs(st.trade_items) do
		-- demonized: fixed count loop to go down
		local count = tonumber(count) or 0
		for i=count, 1, -1 do
			itm = npc:object(sec)
			if (itm) then
				can_sell = true

				-- Make sure item is not his best weapon
				bw = npc:best_weapon()
				if (bw and bw:id() == itm:id()) then
					can_sell = false
				end

				-- Make sure item is not equipped
				for i=1,12 do
					slot = npc:item_in_slot(i)
					if (slot and slot:id() == itm:id()) then
						can_sell = false
						break
					end
				end

				buy_sell = axr_trade_manager.ini:r_string_ex("buy_sell",sec)
				if (buy_sell and buy_sell ~= "" and can_sell) then
					buy_sell = str_explode(buy_sell,",")
					
					-- Transfer the item
					if seller then
						npc:transfer_item(itm, seller)
					else
						alife_release_id(itm:id())
					end

					-- Give money
					itm_base_cost = ini_sys:r_float_ex(sec,"cost") or 30
					local money = math.floor(itm_base_cost * (tonumber(buy_sell[4]) or 1))
					npc:give_money(money)
					
					-- Increase NPC rank because he is a good boy
					game_statistics.increment_npc_statistic(npc,"items_sold")
					
					printf("- NPC Trade | %s sold [%s] for %s RU", npc:name(), sec, money)

					-- Only sell enough till reach keep-in-stock count (param 1)
					if (i <= tonumber(buy_sell[1])) then
						break
					end
				end
			end
		end
	end
	
	empty_table(st.trade_items)
	st.has_items_to_sell = false

	-- BUY ITEMS
	local money = npc:money()
	if (money == nil or money <= 0) then
		return
	end

	if not (smart) then
		return
	end

	if (npc_info == nil or npc_info.job == nil) then
		return
	end

	if not (seller) then
		return
	end

	printf("- NPC Trade | Buying")

	local valid_items = utils_data.collect_section(axr_trade_manager.ini,"buy_sell",true)
	local item_list = {}

	local count = 0
	local function itr(npc,itm)
		local sec = itm:section()
		if (sec and valid_items[sec]) then
			-- count all valid items NPC has matching the buy_sell list
			item_list[sec] = item_list[sec] and item_list[sec] + 1 or 1
		end
	end

	npc:iterate_inventory(itr,npc)

	local bw = npc:best_weapon()
	bw = bw and bw:section()

	local bw_ammos = bw and parse_list(ini_sys,bw,"ammo_class",true)
	local buy_sell_items = {}
	local size_t = 0
	local buy_sell,total_cost
	for sec,v in pairs(valid_items) do
		buy_sell = axr_trade_manager.ini:r_string_ex("buy_sell",sec)
		if (buy_sell and buy_sell ~= "") then
			buy_sell = str_explode(buy_sell,",")

			itm_base_cost = ini_sys:r_float_ex(sec,"cost") or 30
			total_cost = math.floor(itm_base_cost * (tonumber(buy_sell[5]) or 1))

			-- If section is ammo, only buy ammo for best weapon
			if IsItem("ammo",sec) or (bw_ammos and bw_ammos[sec]) then
				if (item_list[sec]) then
					-- only buy enough to reach restock goals (param 3)
					for i=item_list[sec],tonumber(buy_sell[3]) do
						if (money >= total_cost) then
							size_t = size_t + 1
							buy_sell_items[size_t] = sec
							alife_create_item(sec, npc)
							npc:transfer_money(total_cost,seller)
							printf("- NPC Trade | %s bought [%s] for %s RU", npc:name(), sec, total_cost)
							money = money - total_cost
						end
					end
				else
					-- only buy enough to reach restock goals (param 3)
					for i=1,tonumber(buy_sell[3]) do
						if (money >= total_cost) then
							size_t = size_t + 1
							buy_sell_items[size_t] = sec
							alife_create_item(sec, npc)
							npc:transfer_money(total_cost,seller)
							printf("- NPC Trade | %s bought [%s] for %s RU", npc:name(), sec, total_cost)
							money = money - total_cost
						end
					end
				end
			end
		end

		-- NPC ran out of money, end loop
		if (money <= 0) then
			break
		end
	end
	
	if (#buy_sell_items > 0) then 
		if (dynamic_news_manager and ui_options.get("alife/dynamic_news/nearby_activity_news")) then 
			dynamic_news_manager.get_dynamic_news():BoughtItems(npc,seller,buy_sell_items)
		end
	end
end

function axr_trade_manager.npc_tech_upgrade_sell(npc)
	local id = npc and npc:id()
	local st = id and db.storage[id]
	if not (st) then
		return
	end

	if not (st.has_tech_items) then
		--printf("st.has_tech_items = nil!")
		return
	end

	if not (st.tech_items) then
		--printf("no tech items to sell")
		return
	end

	local smart = xr_gulag.get_npc_smart(npc)
	local npc_info = smart and smart.npc_info[id]
	if (npc_info) then
		npc_info.job.idle = time_global() + 20000
	end

	printf("- NPC Tech | Selling")

	local se_obj = alife_object(id)
	if not (se_obj) then 
		return 
	end
	
	-- Get the Trader
	local smart = xr_gulag.get_npc_smart(npc)
	local npc_info = smart and smart.npc_info[id]
	local mechanic_id = npc_info and npc_info.job and npc_info.job.mechanic_id
	local mechanic = mechanic_id and (db.storage[mechanic_id] and db.storage[mechanic_id].object or level.object_by_id(mechanic_id))
	printf("- NPC Tech | Mechanic = %s", mechanic and mechanic:name())
	
	-- SELL ITEMS
	local itm,itm_base_cost,buy_sell, slot, bw,can_sell
	for sec,count in pairs(st.tech_items) do
		-- demonized: fixed count loop to go down
		local count = tonumber(count) or 0
		for i=count, 1, -1 do
			itm = npc:object(sec)
			if (itm) then
				can_sell = true

				-- Make sure item is not his best weapon
				bw = npc:best_weapon()
				if (bw and bw:id() == itm:id()) then
					can_sell = false
				end

				-- Make sure item is not equipped
				for i=1,12 do
					slot = npc:item_in_slot(i)
					if (slot and slot:id() == itm:id()) then
						can_sell = false
						break
					end
				end

				buy_sell = axr_trade_manager.ini:r_string_ex("buy_sell_mechanic",sec)
				if (buy_sell and buy_sell ~= "" and can_sell) then
					buy_sell = str_explode(buy_sell,",")
					
					-- Transfer the item
					if mechanic then
						npc:transfer_item(itm, mechanic)
					else
						alife_release_id(itm:id())
					end

					-- Give money
					itm_base_cost = ini_sys:r_float_ex(sec,"cost") or 30
					local money = math.floor(itm_base_cost * (tonumber(buy_sell[4]) or 1))
					npc:give_money(money)
					
					-- Increase NPC rank because he is a good boy
					game_statistics.increment_npc_statistic(npc,"items_sold")
					
					printf("- NPC Tech | %s sold [%s] for %s RU", npc:name(), sec, money)

					-- Only sell enough till reach keep-in-stock count (param 1)
					if (i <= tonumber(buy_sell[1])) then
						break
					end
				end
			else
				printf("! NPC Tech | no item [%s] found for npc %s", sec, npc:name())
			end
		end
	end
	
	empty_table(st.tech_items)
	st.has_tech_items = false

	-- Upgrade
	local money = npc:money()
	if (money == nil or money <= 0) then
		return
	end

	if not (smart) then
		return
	end

	if (npc_info == nil or npc_info.job == nil) then
		return
	end

	if not (mechanic) then
		return
	end
	
	local wpn = npc:best_weapon()
	if not (wpn and IsWeapon(wpn) and not IsMelee(wpn)) then
		return
	end
	
	local sec_wpn = wpn:section()
	printf("- NPC Tech | Upgrading weapons [%s]", sec_wpn)
	
	-- Upgrades calculating
	local picked = {}
	local upgrades = utils_item.get_upgrades_tree(sec_wpn)
	if not (upgrades and size_table(upgrades) > 0) then
		printf("warning: axr_trade_manager.npc_tech_upgrade_sell(): no upgrades found for [%s]", sec_wpn)
		return
	end
	local installed = utils_item.get_upgrades_installed(wpn, nil, true)
	
	local opposite = {
			[1] = 2,
			[2] = 1,
			[3] = 4,
			[4] = 3,
			[5] = 6,
			[6] = 5,
	}
	local money_before = money
	local functor = function(t,a,b) return a < b end
	local cnt = 0
	
	for gr,v in spairs(upgrades,functor) do
		for ind,v2 in spairs(v,functor) do
			if installed[v2.section] then
				axr_trade_manager.picked_set(picked, gr, ind)
			end
		end
	end
	
	while (cnt < axr_trade_manager.max_upgrades_per_visit) and (money > 500) do
		local gr = random_key_table(upgrades)
		for ind, v in spairs(upgrades[gr],functor) do
			local section = v.section
			local cost = v.stats_cost or 2000
			
			if upgrades[gr][ind].prop
			and (upgrades[gr][ind].prop[1] ~= "prop_not_available")
			and axr_trade_manager.picked_unchecked(picked, gr, ind)
			and (not installed[section])
			then
				if (not upgrades[gr][opposite[ind]])
				or (upgrades[gr][opposite[ind]] and axr_trade_manager.picked_unchecked(picked, gr, opposite[ind]))
				then
					axr_trade_manager.picked_set(picked, gr, ind)
					money = money - cost
					printf("/ NPC Tech | %s installed upgrade [%s] for %s RU", npc:name(), section, cost)
					break
				end
			end
		end
		cnt = cnt + 1
	end
	money = money > 100 and money or math.random(100,200)
	
	local to_install = {}
	local new_install = {}
	for gr,v in spairs(upgrades,functor) do
		for ind,v2 in spairs(v,functor) do
			if (picked[gr] and picked[gr][ind]) then
				to_install[#to_install + 1] = v2.section
				new_install[#new_install + 1] = v2.section
				printf("- NPC Tech | upgrade [%s] is new", v2.section)
			elseif installed[v2.section] then
				to_install[#to_install + 1] = v2.section
				printf("~ NPC Tech | upgrade [%s] is old", v2.section)
			end
		end
	end
	
	if (#to_install <= #installed) then
		printf("! NPC Tech | no new upgrades are picked")
		return
	end
	
	-- Consume NPC money
	npc:give_money(money - money_before)
	printf("/ NPC Tech | money taken: %s", money - money_before)
	
	-- Install upgrades
	inventory_upgrades.force_upgrade = true
	for i=1,#new_install do
		wpn:install_upgrade(new_install[i])
	end
	inventory_upgrades.force_upgrade = false

	
	-- Send news
	if (#new_install > 0) then 
		if (dynamic_news_manager and ui_options.get("alife/dynamic_news/nearby_activity_news")) then
			dynamic_news_manager.get_dynamic_news():UpgradedItems(npc, mechanic, sec_wpn, new_install)
		end
	end
end

-- Fix for returning wrong attached scope
utils_item.has_scope = function(section)
	if not utils_item.scopes_list then
		utils_item.scopes_list = utils_data.collect_section(ini_sys, "addons_table")
	end

	local function sort_func(t, a, b)
		if #t[a] ~= #t[b] then 
			return sort_func_values_length_descend(t, a, b) 
		else
			return sort_func_values_descend(t, a, b)
		end
	end
	
	-- Determine which addon is attached to the weapon.
	-- demonized: Sort addons by descend and check if the weapon section ends with addon section instead of string.find
	for k, v in spairs(utils_item.scopes_list, sort_func) do
		if section:endswith(v) then
			return v
		end
	end
end

-- Fix for returning wrong scope section on detaching
function item_weapon.detach_scope(weapon)
	-- Return if the weapon is not valid.
	if not weapon then
		return
	end
	
	-- An addon has not been attached or none can be detached.
	local parent_section = ini_sys:r_string_ex(weapon:section(),"parent_section")
	if not parent_section or weapon:section() == parent_section then
		return
	end
	
	-- Get weapon owner
	local old_weapon = alife_object(weapon:id())
	local owner = old_weapon and old_weapon.parent_id and get_object_by_id(old_weapon.parent_id)
	if not owner then
		printf("~ item_weapon.detach_scope | weapon owner not found")
		return
	end

	local function sort_func(t, a, b)
		if #a ~= #b then 
			return sort_func_keys_length_descend(t, a, b) 
		else
			return sort_func_keys_descend(t, a, b)
		end
	end
	
	-- Determine which addon is attached to the weapon.
	-- Create the item in the actor's inventory when found.
	-- demonized: Sort addons by descend and check if the weapon section ends with addon section instead of string.find
	for k, v in spairs(item_weapon.scopes_table, sort_func) do
		if weapon:section():endswith(k) then
			alife_create_item(k, owner)
			break
		end
	end
	
	-- Create objects for the 'before' and 'after' detachment weapons.
	if old_weapon then
		alife_clone_weapon(old_weapon, parent_section)
	end
end

-- Fixed 65534 loop in this
function trans_outfit.transparent_gg()
	if not trans_outfit.ReadOutfitBlindnessKoeff then return end

	local range1 
	local outfit_in_slot = db.actor:item_in_slot(7)

	if not outfit_in_slot then 
		range1 = 80  
	elseif trans_outfit.ReadOutfitBlindnessKoeff(outfit_in_slot:section()) > 0.0 then
		range1 = trans_outfit.ReadOutfitBlindnessKoeff(outfit_in_slot:section())
	else 
		range1 = 80 
	end  

	for i = 1, #db.OnlineStalkers do
		local id = db.OnlineStalkers[i]
		local obj_around = gameobjects_registry[id]
		if obj_around and id ~= AC_ID then
			local dist_act_npc = db.actor:position():distance_to_sqr(obj_around:position())
			if dist_act_npc <= 120*120 then  
				obj_around:set_range(range1)
			else 
				obj_around:set_range(80) 
			end 
		end 
	end
end 
